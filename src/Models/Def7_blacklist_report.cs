// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Models
{
    /// <summary>
    /// Detailed blacklist report for the domain or IP
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Def7_blacklist_report : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The address or domain associated with the report</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address { get; set; }
#nullable restore
#else
        public string Address { get; set; }
#endif
        /// <summary>The count of blacklists the address is listed on</summary>
        public int? BlacklistedCount { get; set; }
        /// <summary>List of individual blacklist details</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Instantly.OpenApiClient.Models.Def7_blacklist_report_details>? Details { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Instantly.OpenApiClient.Models.Def7_blacklist_report_details> Details { get; set; }
#endif
        /// <summary>The IP address associated with the blacklist check</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ip { get; set; }
#nullable restore
#else
        public string Ip { get; set; }
#endif
        /// <summary>Overall status indicating if the address is blacklisted</summary>
        public bool? IsBlacklisted { get; set; }
        /// <summary>Whether the address is a domain</summary>
        public bool? IsDomain { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def7_blacklist_report"/> and sets the default values.
        /// </summary>
        public Def7_blacklist_report()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def7_blacklist_report"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Models.Def7_blacklist_report CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Models.Def7_blacklist_report();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "address", n => { Address = n.GetStringValue(); } },
                { "blacklisted_count", n => { BlacklistedCount = n.GetIntValue(); } },
                { "details", n => { Details = n.GetCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Models.Def7_blacklist_report_details>(global::Soenneker.Instantly.OpenApiClient.Models.Def7_blacklist_report_details.CreateFromDiscriminatorValue)?.AsList(); } },
                { "ip", n => { Ip = n.GetStringValue(); } },
                { "is_blacklisted", n => { IsBlacklisted = n.GetBoolValue(); } },
                { "is_domain", n => { IsDomain = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("address", Address);
            writer.WriteIntValue("blacklisted_count", BlacklistedCount);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Models.Def7_blacklist_report_details>("details", Details);
            writer.WriteStringValue("ip", Ip);
            writer.WriteBoolValue("is_blacklisted", IsBlacklisted);
            writer.WriteBoolValue("is_domain", IsDomain);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
