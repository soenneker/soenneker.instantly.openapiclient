// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Models
{
    /// <summary>
    /// A webhook event that was sent or attempted to be sent
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Def38 : IParsable
    {
        /// <summary>Error message if the webhook failed</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErrorMessage { get; private set; }
#nullable restore
#else
        public string ErrorMessage { get; private set; }
#endif
        /// <summary>Unique identifier for the webhook event (UUID)</summary>
        public Guid? Id { get; private set; }
        /// <summary>Email address of the lead associated with this webhook event</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LeadEmail { get; private set; }
#nullable restore
#else
        public string LeadEmail { get; private set; }
#endif
        /// <summary>Organization (workspace) UUID that owns this webhook event</summary>
        public Guid? OrganizationId { get; private set; }
        /// <summary>JSON payload that was sent/attempted to be sent</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Models.Def38_payload? Payload { get; private set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Models.Def38_payload Payload { get; private set; }
#endif
        /// <summary>Response time in milliseconds for the webhook call</summary>
        public double? ResponseTimeMs { get; private set; }
        /// <summary>Number of retry attempts made</summary>
        public double? RetryCount { get; private set; }
        /// <summary>UUID for grouping retry attempts</summary>
        public Guid? RetryGroupId { get; private set; }
        /// <summary>Whether the retry was successful (for retry events)</summary>
        public bool? RetrySuccessful { get; private set; }
        /// <summary>HTTP status code received from the webhook endpoint (if any)</summary>
        public double? StatusCode { get; private set; }
        /// <summary>Whether the webhook call was successful</summary>
        public bool? Success { get; private set; }
        /// <summary>Timestamp when the webhook event was created</summary>
        public DateTimeOffset? TimestampCreated { get; private set; }
        /// <summary>Date when the webhook event was created (for partitioning)</summary>
        public Date? TimestampCreatedDate { get; private set; }
        /// <summary>Timestamp for the next retry attempt (if applicable)</summary>
        public DateTimeOffset? TimestampNextRetry { get; private set; }
        /// <summary>Target URL where the webhook was sent</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookUrl { get; private set; }
#nullable restore
#else
        public string WebhookUrl { get; private set; }
#endif
        /// <summary>Whether the webhook will be retried</summary>
        public bool? WillRetry { get; private set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def38"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Models.Def38 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Models.Def38();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "error_message", n => { ErrorMessage = n.GetStringValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "lead_email", n => { LeadEmail = n.GetStringValue(); } },
                { "organization_id", n => { OrganizationId = n.GetGuidValue(); } },
                { "payload", n => { Payload = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def38_payload>(global::Soenneker.Instantly.OpenApiClient.Models.Def38_payload.CreateFromDiscriminatorValue); } },
                { "response_time_ms", n => { ResponseTimeMs = n.GetDoubleValue(); } },
                { "retry_count", n => { RetryCount = n.GetDoubleValue(); } },
                { "retry_group_id", n => { RetryGroupId = n.GetGuidValue(); } },
                { "retry_successful", n => { RetrySuccessful = n.GetBoolValue(); } },
                { "status_code", n => { StatusCode = n.GetDoubleValue(); } },
                { "success", n => { Success = n.GetBoolValue(); } },
                { "timestamp_created", n => { TimestampCreated = n.GetDateTimeOffsetValue(); } },
                { "timestamp_created_date", n => { TimestampCreatedDate = n.GetDateValue(); } },
                { "timestamp_next_retry", n => { TimestampNextRetry = n.GetDateTimeOffsetValue(); } },
                { "webhook_url", n => { WebhookUrl = n.GetStringValue(); } },
                { "will_retry", n => { WillRetry = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
        }
    }
}
#pragma warning restore CS0618
