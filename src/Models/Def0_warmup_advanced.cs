// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Models
{
    /// <summary>
    /// Advanced settings for the account
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Def0_warmup_advanced : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Important email rate for the account</summary>
        public double? ImportantRate { get; set; }
        /// <summary>Email open rate for the account</summary>
        public double? OpenRate { get; set; }
        /// <summary>Whether read emulation is enabled</summary>
        public bool? ReadEmulation { get; set; }
        /// <summary>Spam save rate for the account</summary>
        public double? SpamSaveRate { get; set; }
        /// <summary>Whether the account is in warm CTD mode</summary>
        public bool? WarmCtd { get; set; }
        /// <summary>Whether to send emails only on weekdays</summary>
        public bool? WeekdayOnly { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def0_warmup_advanced"/> and sets the default values.
        /// </summary>
        public Def0_warmup_advanced()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def0_warmup_advanced"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Models.Def0_warmup_advanced CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Models.Def0_warmup_advanced();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "important_rate", n => { ImportantRate = n.GetDoubleValue(); } },
                { "open_rate", n => { OpenRate = n.GetDoubleValue(); } },
                { "read_emulation", n => { ReadEmulation = n.GetBoolValue(); } },
                { "spam_save_rate", n => { SpamSaveRate = n.GetDoubleValue(); } },
                { "warm_ctd", n => { WarmCtd = n.GetBoolValue(); } },
                { "weekday_only", n => { WeekdayOnly = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("important_rate", ImportantRate);
            writer.WriteDoubleValue("open_rate", OpenRate);
            writer.WriteBoolValue("read_emulation", ReadEmulation);
            writer.WriteDoubleValue("spam_save_rate", SpamSaveRate);
            writer.WriteBoolValue("warm_ctd", WarmCtd);
            writer.WriteBoolValue("weekday_only", WeekdayOnly);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
