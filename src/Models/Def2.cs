// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Models
{
    /// <summary>
    /// A campaign email, a reply, a manually sent email, or any other email that&apos;s visible in the Unibox
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Def2 : IParsable
    {
        /// <summary>Indicates if AI assistance was used</summary>
        public double? AiAssisted { get; set; }
        /// <summary>AI interest value</summary>
        public double? AiInterestValue { get; set; }
        /// <summary>Comma-separated list of BCC email addresses</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BccAddressEmailList { get; set; }
#nullable restore
#else
        public string BccAddressEmailList { get; set; }
#endif
        /// <summary>An object containing the email body in HTML and text format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Models.Def2_body? Body { get; private set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Models.Def2_body Body { get; private set; }
#endif
        /// <summary>The id of the campaign that the email is associated with (it can be null for manually sent emails)</summary>
        public Guid? CampaignId { get; set; }
        /// <summary>Comma-separated list of CC email addresses</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CcAddressEmailList { get; set; }
#nullable restore
#else
        public string CcAddressEmailList { get; set; }
#endif
        /// <summary>List of CC address details</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? CcAddressJson { get; set; }
#nullable restore
#else
        public UntypedNode CcAddressJson { get; set; }
#endif
        /// <summary>A short preview of the email content (usually the first few lines of the email)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContentPreview { get; set; }
#nullable restore
#else
        public string ContentPreview { get; set; }
#endif
        /// <summary>The email account that was used to send the email. This needs to be validated to make sure it exists in the user workspace</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Eaccount { get; set; }
#nullable restore
#else
        public string Eaccount { get; set; }
#endif
        /// <summary>The sender email address, populated based on the eaccount</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FromAddressEmail { get; private set; }
#nullable restore
#else
        public string FromAddressEmail { get; private set; }
#endif
        /// <summary>List of from address details</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? FromAddressJson { get; set; }
#nullable restore
#else
        public UntypedNode FromAddressJson { get; set; }
#endif
        /// <summary>A Unique identifier</summary>
        public Guid? Id { get; private set; }
        /// <summary>Indicates if the email is an auto-reply. 0 (zero) - is false, and 1 is true</summary>
        public double? IsAutoReply { get; private set; }
        /// <summary>Indicates if the email is focused (is in the primary tab in the Unibox)</summary>
        public double? IsFocused { get; set; }
        /// <summary>Indicates the interest status of the email</summary>
        public double? IStatus { get; set; }
        /// <summary>Indicates if the email is unread</summary>
        public double? IsUnread { get; set; }
        /// <summary>The email address of the lead that the email is associated with</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Lead { get; set; }
#nullable restore
#else
        public string Lead { get; set; }
#endif
        /// <summary>The lead id (if any)</summary>
        public Guid? LeadId { get; set; }
        /// <summary>The id of the list (if the lead is part of a list)</summary>
        public Guid? ListId { get; set; }
        /// <summary>Unique email ID from the email server</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MessageId { get; private set; }
#nullable restore
#else
        public string MessageId { get; private set; }
#endif
        /// <summary>The workspace ID</summary>
        public Guid? OrganizationId { get; private set; }
        /// <summary>Timestamp for the reminder.</summary>
        public DateTimeOffset? ReminderTs { get; set; }
        /// <summary>Reply-to email address</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReplyTo { get; set; }
#nullable restore
#else
        public string ReplyTo { get; set; }
#endif
        /// <summary>The campaign step that the email is associated with</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Step { get; set; }
#nullable restore
#else
        public string Step { get; set; }
#endif
        /// <summary>Subject line of the email message</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subject { get; set; }
#nullable restore
#else
        public string Subject { get; set; }
#endif
        /// <summary>The id of the campaign subsequence that the email is associated with (it can be null for manually sent emails)</summary>
        public Guid? SubsequenceId { get; set; }
        /// <summary>Identifier for the email thread. All the emails in the same thread have the same thread ID</summary>
        public Guid? ThreadId { get; set; }
        /// <summary>Timestamp when the email was added to our database. This is not the timestamp of the email itself, since the email could have been sent at a different time. Please check the `timestamp_email` field for the timestamp of the email.</summary>
        public DateTimeOffset? TimestampCreated { get; private set; }
        /// <summary>The timestamp of the email, as provided by the email server. Please note that the timestamp is not always accurate, as it can be manipulated by the sender or the email server.</summary>
        public DateTimeOffset? TimestampEmail { get; private set; }
        /// <summary>Comma-separated list of recipient email addresses</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ToAddressEmailList { get; set; }
#nullable restore
#else
        public string ToAddressEmailList { get; set; }
#endif
        /// <summary>List of to address details</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? ToAddressJson { get; set; }
#nullable restore
#else
        public UntypedNode ToAddressJson { get; set; }
#endif
        /// <summary>Email type based on the life cycle of the email</summary>
        public double? UeType { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def2"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Models.Def2 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Models.Def2();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ai_assisted", n => { AiAssisted = n.GetDoubleValue(); } },
                { "ai_interest_value", n => { AiInterestValue = n.GetDoubleValue(); } },
                { "bcc_address_email_list", n => { BccAddressEmailList = n.GetStringValue(); } },
                { "body", n => { Body = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def2_body>(global::Soenneker.Instantly.OpenApiClient.Models.Def2_body.CreateFromDiscriminatorValue); } },
                { "campaign_id", n => { CampaignId = n.GetGuidValue(); } },
                { "cc_address_email_list", n => { CcAddressEmailList = n.GetStringValue(); } },
                { "cc_address_json", n => { CcAddressJson = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "content_preview", n => { ContentPreview = n.GetStringValue(); } },
                { "eaccount", n => { Eaccount = n.GetStringValue(); } },
                { "from_address_email", n => { FromAddressEmail = n.GetStringValue(); } },
                { "from_address_json", n => { FromAddressJson = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "i_status", n => { IStatus = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "is_auto_reply", n => { IsAutoReply = n.GetDoubleValue(); } },
                { "is_focused", n => { IsFocused = n.GetDoubleValue(); } },
                { "is_unread", n => { IsUnread = n.GetDoubleValue(); } },
                { "lead", n => { Lead = n.GetStringValue(); } },
                { "lead_id", n => { LeadId = n.GetGuidValue(); } },
                { "list_id", n => { ListId = n.GetGuidValue(); } },
                { "message_id", n => { MessageId = n.GetStringValue(); } },
                { "organization_id", n => { OrganizationId = n.GetGuidValue(); } },
                { "reminder_ts", n => { ReminderTs = n.GetDateTimeOffsetValue(); } },
                { "reply_to", n => { ReplyTo = n.GetStringValue(); } },
                { "step", n => { Step = n.GetStringValue(); } },
                { "subject", n => { Subject = n.GetStringValue(); } },
                { "subsequence_id", n => { SubsequenceId = n.GetGuidValue(); } },
                { "thread_id", n => { ThreadId = n.GetGuidValue(); } },
                { "timestamp_created", n => { TimestampCreated = n.GetDateTimeOffsetValue(); } },
                { "timestamp_email", n => { TimestampEmail = n.GetDateTimeOffsetValue(); } },
                { "to_address_email_list", n => { ToAddressEmailList = n.GetStringValue(); } },
                { "to_address_json", n => { ToAddressJson = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "ue_type", n => { UeType = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("ai_assisted", AiAssisted);
            writer.WriteDoubleValue("ai_interest_value", AiInterestValue);
            writer.WriteStringValue("bcc_address_email_list", BccAddressEmailList);
            writer.WriteGuidValue("campaign_id", CampaignId);
            writer.WriteStringValue("cc_address_email_list", CcAddressEmailList);
            writer.WriteObjectValue<UntypedNode>("cc_address_json", CcAddressJson);
            writer.WriteStringValue("content_preview", ContentPreview);
            writer.WriteStringValue("eaccount", Eaccount);
            writer.WriteObjectValue<UntypedNode>("from_address_json", FromAddressJson);
            writer.WriteDoubleValue("is_focused", IsFocused);
            writer.WriteDoubleValue("i_status", IStatus);
            writer.WriteDoubleValue("is_unread", IsUnread);
            writer.WriteStringValue("lead", Lead);
            writer.WriteGuidValue("lead_id", LeadId);
            writer.WriteGuidValue("list_id", ListId);
            writer.WriteDateTimeOffsetValue("reminder_ts", ReminderTs);
            writer.WriteStringValue("reply_to", ReplyTo);
            writer.WriteStringValue("step", Step);
            writer.WriteStringValue("subject", Subject);
            writer.WriteGuidValue("subsequence_id", SubsequenceId);
            writer.WriteGuidValue("thread_id", ThreadId);
            writer.WriteStringValue("to_address_email_list", ToAddressEmailList);
            writer.WriteObjectValue<UntypedNode>("to_address_json", ToAddressJson);
            writer.WriteDoubleValue("ue_type", UeType);
        }
    }
}
#pragma warning restore CS0618
