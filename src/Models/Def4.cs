// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Models
{
    /// <summary>
    /// A list used to store leads
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Def4 : IParsable
    {
        /// <summary>Whether this list runs the enrichment process on every added lead or not</summary>
        public bool? HasEnrichmentTask { get; set; }
        /// <summary>Unique identifier for the lead list</summary>
        public Guid? Id { get; private set; }
        /// <summary>Name of the lead list</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Organization ID that owns this lead list</summary>
        public Guid? OrganizationId { get; private set; }
        /// <summary>User ID of the owner of this lead list. Defaults to the user that created the list</summary>
        public Guid? OwnedBy { get; set; }
        /// <summary>Timestamp when the lead list was created</summary>
        public DateTimeOffset? TimestampCreated { get; private set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def4"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Models.Def4 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Models.Def4();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "has_enrichment_task", n => { HasEnrichmentTask = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "organization_id", n => { OrganizationId = n.GetGuidValue(); } },
                { "owned_by", n => { OwnedBy = n.GetGuidValue(); } },
                { "timestamp_created", n => { TimestampCreated = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("has_enrichment_task", HasEnrichmentTask);
            writer.WriteStringValue("name", Name);
            writer.WriteGuidValue("owned_by", OwnedBy);
        }
    }
}
#pragma warning restore CS0618
