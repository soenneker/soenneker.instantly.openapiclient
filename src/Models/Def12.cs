// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Models
{
    /// <summary>
    /// A background job that can be used to perform long-running tasks
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Def12 : IParsable
    {
        /// <summary>Timestamp when the job was created</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>Data about the job, used to store any additional information we need to process the job</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Models.Def12_data? Data { get; set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Models.Def12_data Data { get; set; }
#endif
        /// <summary>The id of the entity that the job is related to</summary>
        public Guid? EntityId { get; set; }
        /// <summary>Type of entity</summary>
        public global::Soenneker.Instantly.OpenApiClient.Models.Def12_entity_type? EntityType { get; set; }
        /// <summary>Unique identifier for the background job</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>Progress of the job as a percentage (from 0 to 100)</summary>
        public double? Progress { get; set; }
        /// <summary>Job status</summary>
        public global::Soenneker.Instantly.OpenApiClient.Models.Def12_status? Status { get; set; }
        /// <summary>Type of background job</summary>
        public global::Soenneker.Instantly.OpenApiClient.Models.Def12_type? Type { get; set; }
        /// <summary>Timestamp when the job was last updated</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; set; }
#nullable restore
#else
        public string UpdatedAt { get; set; }
#endif
        /// <summary>The id of the user that triggered the action that created the job</summary>
        public Guid? UserId { get; private set; }
        /// <summary>Workspace ID</summary>
        public Guid? WorkspaceId { get; private set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def12"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Models.Def12 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Models.Def12();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created_at", n => { CreatedAt = n.GetStringValue(); } },
                { "data", n => { Data = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def12_data>(global::Soenneker.Instantly.OpenApiClient.Models.Def12_data.CreateFromDiscriminatorValue); } },
                { "entity_id", n => { EntityId = n.GetGuidValue(); } },
                { "entity_type", n => { EntityType = n.GetEnumValue<global::Soenneker.Instantly.OpenApiClient.Models.Def12_entity_type>(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "progress", n => { Progress = n.GetDoubleValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Instantly.OpenApiClient.Models.Def12_status>(); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Instantly.OpenApiClient.Models.Def12_type>(); } },
                { "updated_at", n => { UpdatedAt = n.GetStringValue(); } },
                { "user_id", n => { UserId = n.GetGuidValue(); } },
                { "workspace_id", n => { WorkspaceId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("created_at", CreatedAt);
            writer.WriteObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def12_data>("data", Data);
            writer.WriteGuidValue("entity_id", EntityId);
            writer.WriteEnumValue<global::Soenneker.Instantly.OpenApiClient.Models.Def12_entity_type>("entity_type", EntityType);
            writer.WriteDoubleValue("progress", Progress);
            writer.WriteEnumValue<global::Soenneker.Instantly.OpenApiClient.Models.Def12_status>("status", Status);
            writer.WriteEnumValue<global::Soenneker.Instantly.OpenApiClient.Models.Def12_type>("type", Type);
            writer.WriteStringValue("updated_at", UpdatedAt);
        }
    }
}
#pragma warning restore CS0618
