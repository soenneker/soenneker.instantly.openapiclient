// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Models
{
    /// <summary>
    /// A Done-For-You email account order
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Def39 : IParsable
    {
        /// <summary>Domain of the email account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Domain { get; private set; }
#nullable restore
#else
        public string Domain { get; private set; }
#endif
        /// <summary>Forwarding domain for the email account, if any</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ForwardingDomain { get; set; }
#nullable restore
#else
        public string ForwardingDomain { get; set; }
#endif
        /// <summary>Indicates if the account is pre-warmed up</summary>
        public bool? IsPreWarmedUp { get; set; }
        /// <summary>Timestamp when the order was cancelled, if applicable</summary>
        public DateTimeOffset? TimestampCancelled { get; private set; }
        /// <summary>Timestamp when the order was created</summary>
        public DateTimeOffset? TimestampCreated { get; private set; }
        /// <summary>ID of the workspace associated with the email account order</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WorkspaceId { get; private set; }
#nullable restore
#else
        public string WorkspaceId { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def39"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Models.Def39 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Models.Def39();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "domain", n => { Domain = n.GetStringValue(); } },
                { "forwarding_domain", n => { ForwardingDomain = n.GetStringValue(); } },
                { "is_pre_warmed_up", n => { IsPreWarmedUp = n.GetBoolValue(); } },
                { "timestamp_cancelled", n => { TimestampCancelled = n.GetDateTimeOffsetValue(); } },
                { "timestamp_created", n => { TimestampCreated = n.GetDateTimeOffsetValue(); } },
                { "workspace_id", n => { WorkspaceId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("forwarding_domain", ForwardingDomain);
            writer.WriteBoolValue("is_pre_warmed_up", IsPreWarmedUp);
        }
    }
}
#pragma warning restore CS0618
