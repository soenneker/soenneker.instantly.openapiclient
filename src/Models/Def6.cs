// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Models
{
    /// <summary>
    /// Analytics data for individual emails in inbox placement tests
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Def6 : IParsable
    {
        /// <summary>Details of authentication failures for SPF, DKIM, and DMARC. Only present when record_type is 2 (received).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Models.Def6_authentication_failure_results? AuthenticationFailureResults { get; set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Models.Def6_authentication_failure_results AuthenticationFailureResults { get; set; }
#endif
        /// <summary>Indicates if the email passed DKIM validation. Only present when record_type is 2 (received).</summary>
        public bool? DkimPass { get; set; }
        /// <summary>Indicates if the email passed DMARC validation. Only present when record_type is 2 (received).</summary>
        public bool? DmarcPass { get; set; }
        /// <summary>Indicates if the email was categorized like promotions, social, etc. (null if not determined). Only present when record_type is 2 (received).</summary>
        public bool? HasCategory { get; set; }
        /// <summary>Unique identifier for the inbox placement analytics entry</summary>
        public Guid? Id { get; private set; }
        /// <summary>Indicates if the email landed in spam (null if not determined). Only present when record_type is 2 (received).</summary>
        public bool? IsSpam { get; set; }
        /// <summary>Organization ID</summary>
        public Guid? OrganizationId { get; private set; }
        /// <summary>Email address of the recipient</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecipientEmail { get; set; }
#nullable restore
#else
        public string RecipientEmail { get; set; }
#endif
        /// <summary>The recipient ESP (Email Service Provider)</summary>
        public double? RecipientEsp { get; set; }
        /// <summary>The geographic location of the recipient</summary>
        public double? RecipientGeo { get; set; }
        /// <summary>The type of recipient</summary>
        public double? RecipientType { get; set; }
        /// <summary>The type of record (sent or received)</summary>
        public double? RecordType { get; set; }
        /// <summary>Email address of the sender</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderEmail { get; set; }
#nullable restore
#else
        public string SenderEmail { get; set; }
#endif
        /// <summary>The sender ESP (Email Service Provider). Only present when record_type is 2 (received).</summary>
        public double? SenderEsp { get; set; }
        /// <summary>Blacklist report for the SMTP IP address. Only present when record_type is 2 (received).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Models.Def6_smtp_ip_blacklist_report? SmtpIpBlacklistReport { get; set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Models.Def6_smtp_ip_blacklist_report SmtpIpBlacklistReport { get; set; }
#endif
        /// <summary>Indicates if the email passed SPF validation. Only present when record_type is 2 (received).</summary>
        public bool? SpfPass { get; set; }
        /// <summary>Inbox Placement Test ID</summary>
        public Guid? TestId { get; set; }
        /// <summary>Timestamp when the inbox placement analytics was created</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimestampCreated { get; private set; }
#nullable restore
#else
        public string TimestampCreated { get; private set; }
#endif
        /// <summary>Date when the inbox placement analytics was created</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimestampCreatedDate { get; private set; }
#nullable restore
#else
        public string TimestampCreatedDate { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def6"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Models.Def6 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Models.Def6();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authentication_failure_results", n => { AuthenticationFailureResults = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def6_authentication_failure_results>(global::Soenneker.Instantly.OpenApiClient.Models.Def6_authentication_failure_results.CreateFromDiscriminatorValue); } },
                { "dkim_pass", n => { DkimPass = n.GetBoolValue(); } },
                { "dmarc_pass", n => { DmarcPass = n.GetBoolValue(); } },
                { "has_category", n => { HasCategory = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "is_spam", n => { IsSpam = n.GetBoolValue(); } },
                { "organization_id", n => { OrganizationId = n.GetGuidValue(); } },
                { "recipient_email", n => { RecipientEmail = n.GetStringValue(); } },
                { "recipient_esp", n => { RecipientEsp = n.GetDoubleValue(); } },
                { "recipient_geo", n => { RecipientGeo = n.GetDoubleValue(); } },
                { "recipient_type", n => { RecipientType = n.GetDoubleValue(); } },
                { "record_type", n => { RecordType = n.GetDoubleValue(); } },
                { "sender_email", n => { SenderEmail = n.GetStringValue(); } },
                { "sender_esp", n => { SenderEsp = n.GetDoubleValue(); } },
                { "smtp_ip_blacklist_report", n => { SmtpIpBlacklistReport = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def6_smtp_ip_blacklist_report>(global::Soenneker.Instantly.OpenApiClient.Models.Def6_smtp_ip_blacklist_report.CreateFromDiscriminatorValue); } },
                { "spf_pass", n => { SpfPass = n.GetBoolValue(); } },
                { "test_id", n => { TestId = n.GetGuidValue(); } },
                { "timestamp_created", n => { TimestampCreated = n.GetStringValue(); } },
                { "timestamp_created_date", n => { TimestampCreatedDate = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def6_authentication_failure_results>("authentication_failure_results", AuthenticationFailureResults);
            writer.WriteBoolValue("dkim_pass", DkimPass);
            writer.WriteBoolValue("dmarc_pass", DmarcPass);
            writer.WriteBoolValue("has_category", HasCategory);
            writer.WriteBoolValue("is_spam", IsSpam);
            writer.WriteStringValue("recipient_email", RecipientEmail);
            writer.WriteDoubleValue("recipient_esp", RecipientEsp);
            writer.WriteDoubleValue("recipient_geo", RecipientGeo);
            writer.WriteDoubleValue("recipient_type", RecipientType);
            writer.WriteDoubleValue("record_type", RecordType);
            writer.WriteStringValue("sender_email", SenderEmail);
            writer.WriteDoubleValue("sender_esp", SenderEsp);
            writer.WriteObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def6_smtp_ip_blacklist_report>("smtp_ip_blacklist_report", SmtpIpBlacklistReport);
            writer.WriteBoolValue("spf_pass", SpfPass);
            writer.WriteGuidValue("test_id", TestId);
        }
    }
}
#pragma warning restore CS0618
