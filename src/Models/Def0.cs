// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Models
{
    /// <summary>
    /// An email account that can be used to send campaigns
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Def0 : IParsable
    {
        /// <summary>User ID who added the account</summary>
        public Guid? AddedBy { get; private set; }
        /// <summary>Daily email sending limit</summary>
        public double? DailyLimit { get; set; }
        /// <summary>Whether DFY password has been changed</summary>
        public bool? DfyPasswordChanged { get; private set; }
        /// <summary>Email address of the account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>Whether to enable slow ramp up for sending limits</summary>
        public bool? EnableSlowRamp { get; set; }
        /// <summary>First name associated with the account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>The limit for inbox placement tests</summary>
        public double? InboxPlacementTestLimit { get; set; }
        /// <summary>Whether this is a managed account</summary>
        public bool? IsManagedAccount { get; private set; }
        /// <summary>Last name associated with the account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>User ID who last modified the account</summary>
        public Guid? ModifiedBy { get; private set; }
        /// <summary>Organization ID that owns this account</summary>
        public Guid? Organization { get; private set; }
        /// <summary>Provider code for the account. Please make sure to specify the right provider code, otherwise your account will not work.</summary>
        public double? ProviderCode { get; set; }
        /// <summary>The gap between emails sent from this account in minutes (minimum wait time when used with multiple campaigns)</summary>
        public double? SendingGap { get; set; }
        /// <summary>Whether account setup is pending</summary>
        public bool? SetupPending { get; private set; }
        /// <summary>Current status of the account</summary>
        public double? Status { get; private set; }
        /// <summary>Status message for the account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Models.Def0_status_message? StatusMessage { get; private set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Models.Def0_status_message StatusMessage { get; private set; }
#endif
        /// <summary>Warmup score for the account</summary>
        public double? StatWarmupScore { get; private set; }
        /// <summary>Timestamp when the account was created</summary>
        public DateTimeOffset? TimestampCreated { get; private set; }
        /// <summary>Timestamp when the account was last used</summary>
        public DateTimeOffset? TimestampLastUsed { get; private set; }
        /// <summary>Timestamp when the account was last updated</summary>
        public DateTimeOffset? TimestampUpdated { get; private set; }
        /// <summary>Timestamp when warmup was started</summary>
        public DateTimeOffset? TimestampWarmupStart { get; private set; }
        /// <summary>Tracking domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TrackingDomainName { get; set; }
#nullable restore
#else
        public string TrackingDomainName { get; set; }
#endif
        /// <summary>Tracking domain status</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TrackingDomainStatus { get; set; }
#nullable restore
#else
        public string TrackingDomainStatus { get; set; }
#endif
        /// <summary>Warmup configuration for the account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Models.Def0_warmup? Warmup { get; set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Models.Def0_warmup Warmup { get; set; }
#endif
        /// <summary>ID of the warmup pool this account belongs to</summary>
        public Guid? WarmupPoolId { get; private set; }
        /// <summary>Current warmup status of the account</summary>
        public double? WarmupStatus { get; private set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def0"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Models.Def0 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Models.Def0();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "added_by", n => { AddedBy = n.GetGuidValue(); } },
                { "daily_limit", n => { DailyLimit = n.GetDoubleValue(); } },
                { "dfy_password_changed", n => { DfyPasswordChanged = n.GetBoolValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "enable_slow_ramp", n => { EnableSlowRamp = n.GetBoolValue(); } },
                { "first_name", n => { FirstName = n.GetStringValue(); } },
                { "inbox_placement_test_limit", n => { InboxPlacementTestLimit = n.GetDoubleValue(); } },
                { "is_managed_account", n => { IsManagedAccount = n.GetBoolValue(); } },
                { "last_name", n => { LastName = n.GetStringValue(); } },
                { "modified_by", n => { ModifiedBy = n.GetGuidValue(); } },
                { "organization", n => { Organization = n.GetGuidValue(); } },
                { "provider_code", n => { ProviderCode = n.GetDoubleValue(); } },
                { "sending_gap", n => { SendingGap = n.GetDoubleValue(); } },
                { "setup_pending", n => { SetupPending = n.GetBoolValue(); } },
                { "stat_warmup_score", n => { StatWarmupScore = n.GetDoubleValue(); } },
                { "status", n => { Status = n.GetDoubleValue(); } },
                { "status_message", n => { StatusMessage = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def0_status_message>(global::Soenneker.Instantly.OpenApiClient.Models.Def0_status_message.CreateFromDiscriminatorValue); } },
                { "timestamp_created", n => { TimestampCreated = n.GetDateTimeOffsetValue(); } },
                { "timestamp_last_used", n => { TimestampLastUsed = n.GetDateTimeOffsetValue(); } },
                { "timestamp_updated", n => { TimestampUpdated = n.GetDateTimeOffsetValue(); } },
                { "timestamp_warmup_start", n => { TimestampWarmupStart = n.GetDateTimeOffsetValue(); } },
                { "tracking_domain_name", n => { TrackingDomainName = n.GetStringValue(); } },
                { "tracking_domain_status", n => { TrackingDomainStatus = n.GetStringValue(); } },
                { "warmup", n => { Warmup = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def0_warmup>(global::Soenneker.Instantly.OpenApiClient.Models.Def0_warmup.CreateFromDiscriminatorValue); } },
                { "warmup_pool_id", n => { WarmupPoolId = n.GetGuidValue(); } },
                { "warmup_status", n => { WarmupStatus = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("daily_limit", DailyLimit);
            writer.WriteStringValue("email", Email);
            writer.WriteBoolValue("enable_slow_ramp", EnableSlowRamp);
            writer.WriteStringValue("first_name", FirstName);
            writer.WriteDoubleValue("inbox_placement_test_limit", InboxPlacementTestLimit);
            writer.WriteStringValue("last_name", LastName);
            writer.WriteDoubleValue("provider_code", ProviderCode);
            writer.WriteDoubleValue("sending_gap", SendingGap);
            writer.WriteStringValue("tracking_domain_name", TrackingDomainName);
            writer.WriteStringValue("tracking_domain_status", TrackingDomainStatus);
            writer.WriteObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def0_warmup>("warmup", Warmup);
        }
    }
}
#pragma warning restore CS0618
