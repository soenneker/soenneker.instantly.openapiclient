// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Models
{
    /// <summary>
    /// Report data for an inbox placement test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Def7 : IParsable
    {
        /// <summary>Detailed blacklist report for the domain or IP</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Models.Def7_blacklist_report? BlacklistReport { get; private set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Models.Def7_blacklist_report BlacklistReport { get; private set; }
#endif
        /// <summary>Domain of the inbox placement report</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Domain { get; private set; }
#nullable restore
#else
        public string Domain { get; private set; }
#endif
        /// <summary>Count of blacklists the domain is listed on</summary>
        public double? DomainBlacklistCount { get; private set; }
        /// <summary>IP address of the domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DomainIp { get; private set; }
#nullable restore
#else
        public string DomainIp { get; private set; }
#endif
        /// <summary>Count of blacklists the domain IP is listed on</summary>
        public double? DomainIpBlacklistCount { get; private set; }
        /// <summary>Unique identifier for the inbox placement report entry</summary>
        public Guid? Id { get; private set; }
        /// <summary>Organization ID</summary>
        public Guid? OrganizationId { get; private set; }
        /// <summary>Detailed SpamAssassin analysis report</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Models.Def7_spam_assassin_report? SpamAssassinReport { get; private set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Models.Def7_spam_assassin_report SpamAssassinReport { get; private set; }
#endif
        /// <summary>SpamAssassin score for the email, indicating spam likelihood</summary>
        public double? SpamAssassinScore { get; private set; }
        /// <summary>Inbox Placement Test ID</summary>
        public Guid? TestId { get; private set; }
        /// <summary>Timestamp when the inbox placement report was created</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimestampCreated { get; private set; }
#nullable restore
#else
        public string TimestampCreated { get; private set; }
#endif
        /// <summary>Date when the inbox placement report was created</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimestampCreatedDate { get; private set; }
#nullable restore
#else
        public string TimestampCreatedDate { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def7"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Models.Def7 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Models.Def7();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "blacklist_report", n => { BlacklistReport = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def7_blacklist_report>(global::Soenneker.Instantly.OpenApiClient.Models.Def7_blacklist_report.CreateFromDiscriminatorValue); } },
                { "domain", n => { Domain = n.GetStringValue(); } },
                { "domain_blacklist_count", n => { DomainBlacklistCount = n.GetDoubleValue(); } },
                { "domain_ip", n => { DomainIp = n.GetStringValue(); } },
                { "domain_ip_blacklist_count", n => { DomainIpBlacklistCount = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "organization_id", n => { OrganizationId = n.GetGuidValue(); } },
                { "spam_assassin_report", n => { SpamAssassinReport = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def7_spam_assassin_report>(global::Soenneker.Instantly.OpenApiClient.Models.Def7_spam_assassin_report.CreateFromDiscriminatorValue); } },
                { "spam_assassin_score", n => { SpamAssassinScore = n.GetDoubleValue(); } },
                { "test_id", n => { TestId = n.GetGuidValue(); } },
                { "timestamp_created", n => { TimestampCreated = n.GetStringValue(); } },
                { "timestamp_created_date", n => { TimestampCreatedDate = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
        }
    }
}
#pragma warning restore CS0618
