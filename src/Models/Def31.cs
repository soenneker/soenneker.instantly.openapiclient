// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Models
{
    /// <summary>
    /// Audit log records for tracking system activities
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Def31 : IParsable
    {
        /// <summary>Type of activity performed</summary>
        public double? ActivityType { get; private set; }
        /// <summary>Number of items affected by the activity</summary>
        public double? AffectedCount { get; private set; }
        /// <summary>Metadata about the audit log</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Models.Def31_audit_metadata? AuditMetadata { get; private set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Models.Def31_audit_metadata AuditMetadata { get; private set; }
#endif
        /// <summary>Associated campaign ID if applicable</summary>
        public Guid? CampaignId { get; private set; }
        /// <summary>Whether the activity was performed via API</summary>
        public bool? FromApi { get; private set; }
        /// <summary>The id property</summary>
        public Guid? Id { get; private set; }
        /// <summary>IP address from which the activity was performed</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress { get; private set; }
#nullable restore
#else
        public string IpAddress { get; private set; }
#endif
        /// <summary>Associated list ID if applicable</summary>
        public Guid? ListId { get; private set; }
        /// <summary>Organization ID associated with the activity</summary>
        public Guid? OrganizationId { get; private set; }
        /// <summary>Associated subsequence ID if applicable</summary>
        public Guid? SubsequenceId { get; private set; }
        /// <summary>When the activity occurred</summary>
        public DateTimeOffset? Timestamp { get; private set; }
        /// <summary>User agent of the client that performed the activity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserAgent { get; private set; }
#nullable restore
#else
        public string UserAgent { get; private set; }
#endif
        /// <summary>ID of the user who performed the activity</summary>
        public Guid? UserId { get; private set; }
        /// <summary>Name of the user who performed the activity</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserName { get; private set; }
#nullable restore
#else
        public string UserName { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def31"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Models.Def31 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Models.Def31();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activity_type", n => { ActivityType = n.GetDoubleValue(); } },
                { "affected_count", n => { AffectedCount = n.GetDoubleValue(); } },
                { "audit_metadata", n => { AuditMetadata = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def31_audit_metadata>(global::Soenneker.Instantly.OpenApiClient.Models.Def31_audit_metadata.CreateFromDiscriminatorValue); } },
                { "campaign_id", n => { CampaignId = n.GetGuidValue(); } },
                { "from_api", n => { FromApi = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "ip_address", n => { IpAddress = n.GetStringValue(); } },
                { "list_id", n => { ListId = n.GetGuidValue(); } },
                { "organization_id", n => { OrganizationId = n.GetGuidValue(); } },
                { "subsequence_id", n => { SubsequenceId = n.GetGuidValue(); } },
                { "timestamp", n => { Timestamp = n.GetDateTimeOffsetValue(); } },
                { "user_agent", n => { UserAgent = n.GetStringValue(); } },
                { "user_id", n => { UserId = n.GetGuidValue(); } },
                { "user_name", n => { UserName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
        }
    }
}
#pragma warning restore CS0618
