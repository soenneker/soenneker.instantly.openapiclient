// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Models
{
    /// <summary>
    /// A workspace entity representing a workspace
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Def19 : IParsable
    {
        /// <summary>Whether to add unsubscribes to block list</summary>
        public bool? AddUnsubToBlock { get; set; }
        /// <summary>Default value for opportunities</summary>
        public double? DefaultOpportunityValue { get; set; }
        /// <summary>Unique identifier for the workspace</summary>
        public Guid? Id { get; private set; }
        /// <summary>Name of the workspace</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The domain for the white label agency mode</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrgClientDomain { get; private set; }
#nullable restore
#else
        public string OrgClientDomain { get; private set; }
#endif
        /// <summary>URL to workspace logo</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrgLogoUrl { get; private set; }
#nullable restore
#else
        public string OrgLogoUrl { get; private set; }
#endif
        /// <summary>User ID of the workspace owner</summary>
        public Guid? Owner { get; set; }
        /// <summary>Plan ID for workspace</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlanId { get; private set; }
#nullable restore
#else
        public string PlanId { get; private set; }
#endif
        /// <summary>Plan ID for CRM</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlanIdCrm { get; private set; }
#nullable restore
#else
        public string PlanIdCrm { get; private set; }
#endif
        /// <summary>Plan ID for inbox placement</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlanIdInboxPlacement { get; private set; }
#nullable restore
#else
        public string PlanIdInboxPlacement { get; private set; }
#endif
        /// <summary>Plan ID for leadfinder</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlanIdLeadfinder { get; private set; }
#nullable restore
#else
        public string PlanIdLeadfinder { get; private set; }
#endif
        /// <summary>Plan ID for verification service</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Models.Def19_plan_id_verification? PlanIdVerification { get; private set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Models.Def19_plan_id_verification PlanIdVerification { get; private set; }
#endif
        /// <summary>Plan ID for website visitor tracking</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlanIdWebsiteVisitor { get; private set; }
#nullable restore
#else
        public string PlanIdWebsiteVisitor { get; private set; }
#endif
        /// <summary>Timestamp when the workspace was created</summary>
        public DateTimeOffset? TimestampCreated { get; private set; }
        /// <summary>Timestamp when the workspace was last updated</summary>
        public DateTimeOffset? TimestampUpdated { get; private set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Models.Def19"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Models.Def19 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Models.Def19();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "add_unsub_to_block", n => { AddUnsubToBlock = n.GetBoolValue(); } },
                { "default_opportunity_value", n => { DefaultOpportunityValue = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "org_client_domain", n => { OrgClientDomain = n.GetStringValue(); } },
                { "org_logo_url", n => { OrgLogoUrl = n.GetStringValue(); } },
                { "owner", n => { Owner = n.GetGuidValue(); } },
                { "plan_id", n => { PlanId = n.GetStringValue(); } },
                { "plan_id_crm", n => { PlanIdCrm = n.GetStringValue(); } },
                { "plan_id_inbox_placement", n => { PlanIdInboxPlacement = n.GetStringValue(); } },
                { "plan_id_leadfinder", n => { PlanIdLeadfinder = n.GetStringValue(); } },
                { "plan_id_verification", n => { PlanIdVerification = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Models.Def19_plan_id_verification>(global::Soenneker.Instantly.OpenApiClient.Models.Def19_plan_id_verification.CreateFromDiscriminatorValue); } },
                { "plan_id_website_visitor", n => { PlanIdWebsiteVisitor = n.GetStringValue(); } },
                { "timestamp_created", n => { TimestampCreated = n.GetDateTimeOffsetValue(); } },
                { "timestamp_updated", n => { TimestampUpdated = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("add_unsub_to_block", AddUnsubToBlock);
            writer.WriteDoubleValue("default_opportunity_value", DefaultOpportunityValue);
            writer.WriteStringValue("name", Name);
            writer.WriteGuidValue("owner", Owner);
        }
    }
}
#pragma warning restore CS0618
