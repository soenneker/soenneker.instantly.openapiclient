// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.Leads
{
    /// <summary>
    /// The Lead to create
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LeadsPostRequestBody : IParsable
    {
        /// <summary>ID of the user assigned to the lead</summary>
        public Guid? AssignedTo { get; set; }
        /// <summary>The ID of the blocklist to check for the lead.</summary>
        public Guid? BlocklistId { get; set; }
        /// <summary>Campaign ID associated with the lead</summary>
        public Guid? Campaign { get; set; }
        /// <summary>Company name of the lead</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyName { get; set; }
#nullable restore
#else
        public string CompanyName { get; set; }
#endif
        /// <summary>Custom variables can include any metadata about the lead that is relevant to the campaign, the campaign will be updated to allow all the other leads in the campaign to have the same custom variables. The custom variables will be added to the lead payload field</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.LeadsPostRequestBody_custom_variables? CustomVariables { get; set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.LeadsPostRequestBody_custom_variables CustomVariables { get; set; }
#endif
        /// <summary>Email address of the lead</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>First name of the lead</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>Last name of the lead</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>List ID associated with the lead</summary>
        public Guid? ListId { get; set; }
        /// <summary>Lead interest status. It can be either a static value (check below), or a custom status interest value</summary>
        public double? LtInterestStatus { get; set; }
        /// <summary>Personalization of the lead</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Personalization { get; set; }
#nullable restore
#else
        public string Personalization { get; set; }
#endif
        /// <summary>Phone number of the lead</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phone { get; set; }
#nullable restore
#else
        public string Phone { get; set; }
#endif
        /// <summary>Potential value of the lead</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlValueLead { get; set; }
#nullable restore
#else
        public string PlValueLead { get; set; }
#endif
        /// <summary>Whether to skip if the lead is already in the campaign.</summary>
        public bool? SkipIfInCampaign { get; set; }
        /// <summary>Whether to skip if the lead is already in the list.</summary>
        public bool? SkipIfInList { get; set; }
        /// <summary>Whether to skip if the lead is already in the workspace.</summary>
        public bool? SkipIfInWorkspace { get; set; }
        /// <summary>Whether to verify the leads for the lead finder.</summary>
        public bool? VerifyLeadsForLeadFinder { get; set; }
        /// <summary>Whether to verify the leads on import.</summary>
        public bool? VerifyLeadsOnImport { get; set; }
        /// <summary>Website of the lead</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Website { get; set; }
#nullable restore
#else
        public string Website { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.LeadsPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.LeadsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.LeadsPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assigned_to", n => { AssignedTo = n.GetGuidValue(); } },
                { "blocklist_id", n => { BlocklistId = n.GetGuidValue(); } },
                { "campaign", n => { Campaign = n.GetGuidValue(); } },
                { "company_name", n => { CompanyName = n.GetStringValue(); } },
                { "custom_variables", n => { CustomVariables = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.LeadsPostRequestBody_custom_variables>(global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.LeadsPostRequestBody_custom_variables.CreateFromDiscriminatorValue); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "first_name", n => { FirstName = n.GetStringValue(); } },
                { "last_name", n => { LastName = n.GetStringValue(); } },
                { "list_id", n => { ListId = n.GetGuidValue(); } },
                { "lt_interest_status", n => { LtInterestStatus = n.GetDoubleValue(); } },
                { "personalization", n => { Personalization = n.GetStringValue(); } },
                { "phone", n => { Phone = n.GetStringValue(); } },
                { "pl_value_lead", n => { PlValueLead = n.GetStringValue(); } },
                { "skip_if_in_campaign", n => { SkipIfInCampaign = n.GetBoolValue(); } },
                { "skip_if_in_list", n => { SkipIfInList = n.GetBoolValue(); } },
                { "skip_if_in_workspace", n => { SkipIfInWorkspace = n.GetBoolValue(); } },
                { "verify_leads_for_lead_finder", n => { VerifyLeadsForLeadFinder = n.GetBoolValue(); } },
                { "verify_leads_on_import", n => { VerifyLeadsOnImport = n.GetBoolValue(); } },
                { "website", n => { Website = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("assigned_to", AssignedTo);
            writer.WriteGuidValue("blocklist_id", BlocklistId);
            writer.WriteGuidValue("campaign", Campaign);
            writer.WriteStringValue("company_name", CompanyName);
            writer.WriteObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.LeadsPostRequestBody_custom_variables>("custom_variables", CustomVariables);
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("first_name", FirstName);
            writer.WriteStringValue("last_name", LastName);
            writer.WriteGuidValue("list_id", ListId);
            writer.WriteDoubleValue("lt_interest_status", LtInterestStatus);
            writer.WriteStringValue("personalization", Personalization);
            writer.WriteStringValue("phone", Phone);
            writer.WriteStringValue("pl_value_lead", PlValueLead);
            writer.WriteBoolValue("skip_if_in_campaign", SkipIfInCampaign);
            writer.WriteBoolValue("skip_if_in_list", SkipIfInList);
            writer.WriteBoolValue("skip_if_in_workspace", SkipIfInWorkspace);
            writer.WriteBoolValue("verify_leads_for_lead_finder", VerifyLeadsForLeadFinder);
            writer.WriteBoolValue("verify_leads_on_import", VerifyLeadsOnImport);
            writer.WriteStringValue("website", Website);
        }
    }
}
#pragma warning restore CS0618
