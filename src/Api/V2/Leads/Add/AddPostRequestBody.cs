// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AddPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Optional user ID to assign all imported leads to. If omitted, leads are assigned to the campaign owner when `campaign_id` is defined, or the user making the request.</summary>
        public Guid? AssignedTo { get; set; }
        /// <summary>Optional blocklist ID to check leads against. If omitted, the workspace default blocklist is used.</summary>
        public Guid? BlocklistId { get; set; }
        /// <summary>The unique identifier for the campaign to add leads to. Use this field OR `list_id`, but not both.</summary>
        public Guid? CampaignId { get; set; }
        /// <summary>An array of lead objects to create. When using `campaign_id`: Each lead object must contain an `email`. When using `list_id` Each lead object must contain at least one of the following: `email`, `first_name`, or `last_name`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add.AddPostRequestBody_leads>? Leads { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add.AddPostRequestBody_leads> Leads { get; set; }
#endif
        /// <summary>The unique identifier for the list to add leads to. Use this field OR `campaign_id`, but not both.</summary>
        public Guid? ListId { get; set; }
        /// <summary>If true, any lead that already exists in ANY campaign in your workspace will be skipped.</summary>
        public bool? SkipIfInCampaign { get; set; }
        /// <summary>If true, any lead that already exists in ANY list in your workspace will be skipped.</summary>
        public bool? SkipIfInList { get; set; }
        /// <summary>If true, any lead that already exists anywhere in your workspace (in any campaign or list) will be skipped. This option overrides the other &quot;skip_if&quot; flags.</summary>
        public bool? SkipIfInWorkspace { get; set; }
        /// <summary>If true, a background job will be created to verify the email addresses of the imported leads.</summary>
        public bool? VerifyLeadsOnImport { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add.AddPostRequestBody"/> and sets the default values.
        /// </summary>
        public AddPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add.AddPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add.AddPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add.AddPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assigned_to", n => { AssignedTo = n.GetGuidValue(); } },
                { "blocklist_id", n => { BlocklistId = n.GetGuidValue(); } },
                { "campaign_id", n => { CampaignId = n.GetGuidValue(); } },
                { "leads", n => { Leads = n.GetCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add.AddPostRequestBody_leads>(global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add.AddPostRequestBody_leads.CreateFromDiscriminatorValue)?.AsList(); } },
                { "list_id", n => { ListId = n.GetGuidValue(); } },
                { "skip_if_in_campaign", n => { SkipIfInCampaign = n.GetBoolValue(); } },
                { "skip_if_in_list", n => { SkipIfInList = n.GetBoolValue(); } },
                { "skip_if_in_workspace", n => { SkipIfInWorkspace = n.GetBoolValue(); } },
                { "verify_leads_on_import", n => { VerifyLeadsOnImport = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("assigned_to", AssignedTo);
            writer.WriteGuidValue("blocklist_id", BlocklistId);
            writer.WriteGuidValue("campaign_id", CampaignId);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add.AddPostRequestBody_leads>("leads", Leads);
            writer.WriteGuidValue("list_id", ListId);
            writer.WriteBoolValue("skip_if_in_campaign", SkipIfInCampaign);
            writer.WriteBoolValue("skip_if_in_list", SkipIfInList);
            writer.WriteBoolValue("skip_if_in_workspace", SkipIfInWorkspace);
            writer.WriteBoolValue("verify_leads_on_import", VerifyLeadsOnImport);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
