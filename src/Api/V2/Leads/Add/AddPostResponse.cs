// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add
{
    /// <summary>
    /// A summary of the bulk import operation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AddPostResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ID of the blocklist that was used for the check.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BlocklistUsed { get; set; }
#nullable restore
#else
        public string BlocklistUsed { get; set; }
#endif
        /// <summary>The number of leads that were already in this specific campaign or list and were not re-added.</summary>
        public int? DuplicatedLeads { get; set; }
        /// <summary>The number of leads skipped because their email was duplicated within the request payload itself.</summary>
        public int? DuplicateEmailCount { get; set; }
        /// <summary>The number of leads that were skipped because their email was found on the blocklist.</summary>
        public int? InBlocklist { get; set; }
        /// <summary>The number of leads skipped due to missing email and names. Only calculated for lists.</summary>
        public int? IncompleteCount { get; set; }
        /// <summary>The number of leads skipped due to an invalid email format or a missing email address.</summary>
        public int? InvalidEmailCount { get; set; }
        /// <summary>The number of leads that were successfully created.</summary>
        public int? LeadsUploaded { get; set; }
        /// <summary>The remaining lead uploads in the current billing plan. This value is only present in the response when a `campaign_id` is provided.</summary>
        public int? RemainingInPlan { get; set; }
        /// <summary>The number of leads skipped due to the `skip_if_in_...` flags being enabled.</summary>
        public int? SkippedCount { get; set; }
        /// <summary>Indicates the request was processed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The total number of leads included in the request payload.</summary>
        public int? TotalSent { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add.AddPostResponse"/> and sets the default values.
        /// </summary>
        public AddPostResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add.AddPostResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add.AddPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.Leads.Add.AddPostResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "blocklist_used", n => { BlocklistUsed = n.GetStringValue(); } },
                { "duplicate_email_count", n => { DuplicateEmailCount = n.GetIntValue(); } },
                { "duplicated_leads", n => { DuplicatedLeads = n.GetIntValue(); } },
                { "in_blocklist", n => { InBlocklist = n.GetIntValue(); } },
                { "incomplete_count", n => { IncompleteCount = n.GetIntValue(); } },
                { "invalid_email_count", n => { InvalidEmailCount = n.GetIntValue(); } },
                { "leads_uploaded", n => { LeadsUploaded = n.GetIntValue(); } },
                { "remaining_in_plan", n => { RemainingInPlan = n.GetIntValue(); } },
                { "skipped_count", n => { SkippedCount = n.GetIntValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "total_sent", n => { TotalSent = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("blocklist_used", BlocklistUsed);
            writer.WriteIntValue("duplicated_leads", DuplicatedLeads);
            writer.WriteIntValue("duplicate_email_count", DuplicateEmailCount);
            writer.WriteIntValue("in_blocklist", InBlocklist);
            writer.WriteIntValue("incomplete_count", IncompleteCount);
            writer.WriteIntValue("invalid_email_count", InvalidEmailCount);
            writer.WriteIntValue("leads_uploaded", LeadsUploaded);
            writer.WriteIntValue("remaining_in_plan", RemainingInPlan);
            writer.WriteIntValue("skipped_count", SkippedCount);
            writer.WriteStringValue("status", Status);
            writer.WriteIntValue("total_sent", TotalSent);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
