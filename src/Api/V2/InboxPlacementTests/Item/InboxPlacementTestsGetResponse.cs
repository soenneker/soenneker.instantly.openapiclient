// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class InboxPlacementTestsGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Optional automations to trigger based on conditions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_automations>? Automations { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_automations> Automations { get; set; }
#endif
        /// <summary>Campaign ID</summary>
        public Guid? CampaignId { get; set; }
        /// <summary>Whether to send emails one by one or all together</summary>
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_delivery_mode? DeliveryMode { get; set; }
        /// <summary>Description of the inbox placement test</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Email body of the inbox placement test</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailBody { get; set; }
#nullable restore
#else
        public string EmailBody { get; set; }
#endif
        /// <summary>Emails to send the inbox placement test to</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Emails { get; set; }
#nullable restore
#else
        public List<string> Emails { get; set; }
#endif
        /// <summary>Email subject of the inbox placement test</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailSubject { get; set; }
#nullable restore
#else
        public string EmailSubject { get; set; }
#endif
        /// <summary>Unique identifier for the inbox placement test</summary>
        public Guid? Id { get; private set; }
        /// <summary>Included only when the `with_metadata` parameter is `true`. Contains additional information about the inbox placement test as associated campaign details and tags.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_metadata Metadata { get; set; }
#endif
        /// <summary>Name of the inbox placement test</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Why the inbox placement test is currently not sending. It will be an empty string if there are no issues.</summary>
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_not_sending_status? NotSendingStatus { get; set; }
        /// <summary>Organization ID</summary>
        public Guid? OrganizationId { get; private set; }
        /// <summary>The recipients property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Recipients { get; private set; }
#nullable restore
#else
        public List<string> Recipients { get; private set; }
#endif
        /// <summary>A list of email providers and their corresponding types to which emails will be sent. To retrieve the available options, use the `GET: /inbox-placement-tests/email-service-provider-options` endpoint</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_recipients_labels>? RecipientsLabels { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_recipients_labels> RecipientsLabels { get; set; }
#endif
        /// <summary>Specifies the date and time when the automated inbox placement tests will be sent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_schedule? Schedule { get; set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_schedule Schedule { get; set; }
#endif
        /// <summary>Whether the inbox placement test will be sent from Instantly or from outside Instantly</summary>
        public double? SendingMethod { get; set; }
        /// <summary>Status of the inbox placement test</summary>
        public double? Status { get; set; }
        /// <summary>List of tag IDs to use for sending emails</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? Tags { get; set; }
#nullable restore
#else
        public List<Guid?> Tags { get; set; }
#endif
        /// <summary>Code for identifying the inbox placement tests in the email body from outside Instantly</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TestCode { get; set; }
#nullable restore
#else
        public string TestCode { get; set; }
#endif
        /// <summary>Disables open tracking</summary>
        public bool? TextOnly { get; set; }
        /// <summary>Timestamp when the inbox placement test was created</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimestampCreated { get; private set; }
#nullable restore
#else
        public string TimestampCreated { get; private set; }
#endif
        /// <summary>Timestamp when the inbox placement test will run next</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimestampNextRun { get; set; }
#nullable restore
#else
        public string TimestampNextRun { get; set; }
#endif
        /// <summary>Whether the inbox placement test is a one-time test or an automated test</summary>
        public double? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse"/> and sets the default values.
        /// </summary>
        public InboxPlacementTestsGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "automations", n => { Automations = n.GetCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_automations>(global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_automations.CreateFromDiscriminatorValue)?.AsList(); } },
                { "campaign_id", n => { CampaignId = n.GetGuidValue(); } },
                { "delivery_mode", n => { DeliveryMode = n.GetEnumValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_delivery_mode>(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "email_body", n => { EmailBody = n.GetStringValue(); } },
                { "email_subject", n => { EmailSubject = n.GetStringValue(); } },
                { "emails", n => { Emails = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_metadata>(global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_metadata.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "not_sending_status", n => { NotSendingStatus = n.GetEnumValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_not_sending_status>(); } },
                { "organization_id", n => { OrganizationId = n.GetGuidValue(); } },
                { "recipients", n => { Recipients = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "recipients_labels", n => { RecipientsLabels = n.GetCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_recipients_labels>(global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_recipients_labels.CreateFromDiscriminatorValue)?.AsList(); } },
                { "schedule", n => { Schedule = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_schedule>(global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_schedule.CreateFromDiscriminatorValue); } },
                { "sending_method", n => { SendingMethod = n.GetDoubleValue(); } },
                { "status", n => { Status = n.GetDoubleValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "test_code", n => { TestCode = n.GetStringValue(); } },
                { "text_only", n => { TextOnly = n.GetBoolValue(); } },
                { "timestamp_created", n => { TimestampCreated = n.GetStringValue(); } },
                { "timestamp_next_run", n => { TimestampNextRun = n.GetStringValue(); } },
                { "type", n => { Type = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_automations>("automations", Automations);
            writer.WriteGuidValue("campaign_id", CampaignId);
            writer.WriteEnumValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_delivery_mode>("delivery_mode", DeliveryMode);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("email_body", EmailBody);
            writer.WriteCollectionOfPrimitiveValues<string>("emails", Emails);
            writer.WriteStringValue("email_subject", EmailSubject);
            writer.WriteObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_metadata>("metadata", Metadata);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_not_sending_status>("not_sending_status", NotSendingStatus);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_recipients_labels>("recipients_labels", RecipientsLabels);
            writer.WriteObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementTests.Item.InboxPlacementTestsGetResponse_schedule>("schedule", Schedule);
            writer.WriteDoubleValue("sending_method", SendingMethod);
            writer.WriteDoubleValue("status", Status);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("tags", Tags);
            writer.WriteStringValue("test_code", TestCode);
            writer.WriteBoolValue("text_only", TextOnly);
            writer.WriteStringValue("timestamp_next_run", TimestampNextRun);
            writer.WriteDoubleValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
