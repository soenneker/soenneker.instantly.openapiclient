// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Item;
using Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Reply;
using Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Threads;
using Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Unread;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.Emails
{
    /// <summary>
    /// Builds and executes requests for operations under \api\v2\emails
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class EmailsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The reply property</summary>
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Reply.ReplyRequestBuilder Reply
        {
            get => new global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Reply.ReplyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The threads property</summary>
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Threads.ThreadsRequestBuilder Threads
        {
            get => new global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Threads.ThreadsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The unread property</summary>
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Unread.UnreadRequestBuilder Unread
        {
            get => new global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Unread.UnreadRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Soenneker.Instantly.OpenApiClient.api.v2.emails.item collection</summary>
        /// <param name="position">The ID of the requested item</param>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Item.EmailsItemRequestBuilder"/></returns>
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Item.EmailsItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Item.EmailsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EmailsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v2/emails{?assigned_to*,campaign_id*,company_domain*,eaccount*,email_type*,has_reminder*,i_status*,is_unread*,lead*,limit*,marked_as_done*,mode*,preview_only*,scheduled_only*,search*,sort_order*,starting_after*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EmailsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v2/emails{?assigned_to*,campaign_id*,company_domain*,eaccount*,email_type*,has_reminder*,i_status*,is_unread*,lead*,limit*,marked_as_done*,mode*,preview_only*,scheduled_only*,search*,sort_order*,starting_after*}", rawUrl)
        {
        }
        /// <summary>
        /// Requires one of the following scopes: `emails:read`, `emails:all`, `all:read`, `all:all`
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Emails401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Emails429Error">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsGetResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsRequestBuilder.EmailsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsGetResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsRequestBuilder.EmailsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Emails401Error.CreateFromDiscriminatorValue },
                { "429", global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Emails429Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsGetResponse>(requestInfo, global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Requires one of the following scopes: `emails:read`, `emails:all`, `all:read`, `all:all`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsRequestBuilder.EmailsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsRequestBuilder.EmailsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.EmailsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Requires one of the following scopes: `emails:read`, `emails:all`, `all:read`, `all:all`
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class EmailsRequestBuilderGetQueryParameters 
        {
            /// <summary>The ID of the user to filter emails by.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("assigned_to")]
            public string? AssignedTo { get; set; }
#nullable restore
#else
            [QueryParameter("assigned_to")]
            public string AssignedTo { get; set; }
#endif
            /// <summary>The ID of the campaign to filter emails by.</summary>
            [QueryParameter("campaign_id")]
            public Guid? CampaignId { get; set; }
            /// <summary>The domain of the company to filter emails by.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("company_domain")]
            public string? CompanyDomain { get; set; }
#nullable restore
#else
            [QueryParameter("company_domain")]
            public string CompanyDomain { get; set; }
#endif
            /// <summary>The email account that was used to send this email. You can filter by multiple email accounts by providing a comma-separated list of email addresses.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("eaccount")]
            public string? Eaccount { get; set; }
#nullable restore
#else
            [QueryParameter("eaccount")]
            public string Eaccount { get; set; }
#endif
            /// <summary>The type of the email to filter by.</summary>
            [QueryParameter("email_type")]
            public global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.GetEmail_typeQueryParameterType? EmailType { get; set; }
            [QueryParameter("has_reminder")]
            public bool? HasReminder { get; set; }
            /// <summary>The status of the emails to filter by.</summary>
            [QueryParameter("i_status")]
            public double? IStatus { get; set; }
            /// <summary>Whether the email is unread.</summary>
            [QueryParameter("is_unread")]
            public bool? IsUnread { get; set; }
            /// <summary>The ID of the lead to filter emails by.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("lead")]
            public string? Lead { get; set; }
#nullable restore
#else
            [QueryParameter("lead")]
            public string Lead { get; set; }
#endif
            /// <summary>The number of items to return</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Whether the email is marked as done.</summary>
            [QueryParameter("marked_as_done")]
            public bool? MarkedAsDone { get; set; }
            /// <summary>The mode to filter emails by.</summary>
            [QueryParameter("mode")]
            public global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.GetModeQueryParameterType? Mode { get; set; }
            /// <summary>Whether to only return the preview of the emails.</summary>
            [QueryParameter("preview_only")]
            public bool? PreviewOnly { get; set; }
            /// <summary>Whether to only return the scheduled emails.</summary>
            [QueryParameter("scheduled_only")]
            public bool? ScheduledOnly { get; set; }
            /// <summary>The search query to filter emails. It can be an email address (the lead email address), or a special string that starts with &quot;thread:&quot; to search for emails in a specific thread. If you want to search for emails in a specific thread, use the &quot;thread:&quot; prefix followed by the thread ID (e.g., &quot;thread:123e4567-e89b-12d3-a456-426614174000&quot;).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
            /// <summary>The order to sort the emails by (based on the email creation date). Default is &quot;desc&quot;.</summary>
            [QueryParameter("sort_order")]
            public global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.GetSort_orderQueryParameterType? SortOrder { get; set; }
            /// <summary>The id of the email to start the list from (use the &quot;next_starting_after&quot; field you got in a previous request to paginate)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("starting_after")]
            public string? StartingAfter { get; set; }
#nullable restore
#else
            [QueryParameter("starting_after")]
            public string StartingAfter { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
