// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Reply
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ReplyPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The user id assigned to the lead</summary>
        public Guid? AssignedTo { get; set; }
        /// <summary>Comma-separated list of BCC email addresses</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BccAddressEmailList { get; set; }
#nullable restore
#else
        public string BccAddressEmailList { get; set; }
#endif
        /// <summary>The email body. You can specify either the `html` or the `text` field, or both</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Reply.ReplyPostRequestBody_body? Body { get; set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Reply.ReplyPostRequestBody_body Body { get; set; }
#endif
        /// <summary>Comma-separated list of CC email addresses</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CcAddressEmailList { get; set; }
#nullable restore
#else
        public string CcAddressEmailList { get; set; }
#endif
        /// <summary>The email account that will be used to send this email. It has to be an email account connected to your workspace</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Eaccount { get; set; }
#nullable restore
#else
        public string Eaccount { get; set; }
#endif
        /// <summary>If provided then the email will NOT be sent to user, and you will see this email as a reminder in the Unibox in the web app. Note: this will NOT send or schedule the email for sending, it is used only as a reminder in the web app.</summary>
        public DateTimeOffset? ReminderTs { get; set; }
        /// <summary>The id of the email to reply to</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReplyToUuid { get; set; }
#nullable restore
#else
        public string ReplyToUuid { get; set; }
#endif
        /// <summary>Subject line of the email message</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subject { get; set; }
#nullable restore
#else
        public string Subject { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Reply.ReplyPostRequestBody"/> and sets the default values.
        /// </summary>
        public ReplyPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Reply.ReplyPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Reply.ReplyPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Reply.ReplyPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assigned_to", n => { AssignedTo = n.GetGuidValue(); } },
                { "bcc_address_email_list", n => { BccAddressEmailList = n.GetStringValue(); } },
                { "body", n => { Body = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Reply.ReplyPostRequestBody_body>(global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Reply.ReplyPostRequestBody_body.CreateFromDiscriminatorValue); } },
                { "cc_address_email_list", n => { CcAddressEmailList = n.GetStringValue(); } },
                { "eaccount", n => { Eaccount = n.GetStringValue(); } },
                { "reminder_ts", n => { ReminderTs = n.GetDateTimeOffsetValue(); } },
                { "reply_to_uuid", n => { ReplyToUuid = n.GetStringValue(); } },
                { "subject", n => { Subject = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("assigned_to", AssignedTo);
            writer.WriteStringValue("bcc_address_email_list", BccAddressEmailList);
            writer.WriteObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Emails.Reply.ReplyPostRequestBody_body>("body", Body);
            writer.WriteStringValue("cc_address_email_list", CcAddressEmailList);
            writer.WriteStringValue("eaccount", Eaccount);
            writer.WriteDateTimeOffsetValue("reminder_ts", ReminderTs);
            writer.WriteStringValue("reply_to_uuid", ReplyToUuid);
            writer.WriteStringValue("subject", Subject);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
