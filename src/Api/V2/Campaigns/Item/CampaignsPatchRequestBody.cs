// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CampaignsPatchRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Whether to allow risky contacts</summary>
        public bool? AllowRiskyContacts { get; set; }
        /// <summary>Auto variant select settings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_auto_variant_select? AutoVariantSelect { get; set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_auto_variant_select AutoVariantSelect { get; set; }
#endif
        /// <summary>List of accounts to BCC on emails</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BccList { get; set; }
#nullable restore
#else
        public List<string> BccList { get; set; }
#endif
        /// <summary>Campaign schedule</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_campaign_schedule? CampaignSchedule { get; set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_campaign_schedule CampaignSchedule { get; set; }
#endif
        /// <summary>List of accounts to CC on emails</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CcList { get; set; }
#nullable restore
#else
        public List<string> CcList { get; set; }
#endif
        /// <summary>The daily limit for sending emails</summary>
        public double? DailyLimit { get; set; }
        /// <summary>The daily maximum new leads to contact</summary>
        public double? DailyMaxLeads { get; set; }
        /// <summary>Whether to disable bounce protection</summary>
        public bool? DisableBounceProtect { get; set; }
        /// <summary>The gap between emails in minutes</summary>
        public double? EmailGap { get; set; }
        /// <summary>List of accounts to use for sending emails</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? EmailList { get; set; }
#nullable restore
#else
        public List<string> EmailList { get; set; }
#endif
        /// <summary>List of tags to use for sending emails</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? EmailTagList { get; set; }
#nullable restore
#else
        public List<Guid?> EmailTagList { get; set; }
#endif
        /// <summary>Whether the campaign is send the first email as a text only</summary>
        public bool? FirstEmailTextOnly { get; set; }
        /// <summary>Whether to insert an unsubscribe header in emails</summary>
        public bool? InsertUnsubscribeHeader { get; set; }
        /// <summary>Whether the campaign is evergreen</summary>
        public bool? IsEvergreen { get; set; }
        /// <summary>Overrides the workspace-wide limit emails per company setting for this campaign.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_limit_emails_per_company_override? LimitEmailsPerCompanyOverride { get; set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_limit_emails_per_company_override LimitEmailsPerCompanyOverride { get; set; }
#endif
        /// <summary>Whether to track links in emails</summary>
        public bool? LinkTracking { get; set; }
        /// <summary>Whether to match leads by ESP</summary>
        public bool? MatchLeadEsp { get; set; }
        /// <summary>Name of the campaign</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Whether to track opens in emails</summary>
        public bool? OpenTracking { get; set; }
        /// <summary>Owner ID</summary>
        public Guid? OwnedBy { get; set; }
        /// <summary>Value of every positive lead</summary>
        public double? PlValue { get; set; }
        /// <summary>Whether to prioritize new leads</summary>
        public bool? PrioritizeNewLeads { get; set; }
        /// <summary>Auto variant select settings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_provider_routing_rules>? ProviderRoutingRules { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_provider_routing_rules> ProviderRoutingRules { get; set; }
#endif
        /// <summary>The maximum random wait time in minutes</summary>
        public double? RandomWaitMax { get; set; }
        /// <summary>List of sequences (the actual email copy). Even though this field is an array, only the first element is used, so please provide only one array item, and add the steps to that array</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_sequences>? Sequences { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_sequences> Sequences { get; set; }
#endif
        /// <summary>Whether to stop the campaign for the entire company(domain) when a lead replies</summary>
        public bool? StopForCompany { get; set; }
        /// <summary>Whether to stop the campaign on auto reply</summary>
        public bool? StopOnAutoReply { get; set; }
        /// <summary>Whether to stop the campaign on reply</summary>
        public bool? StopOnReply { get; set; }
        /// <summary>Whether the campaign is text only</summary>
        public bool? TextOnly { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allow_risky_contacts", n => { AllowRiskyContacts = n.GetBoolValue(); } },
                { "auto_variant_select", n => { AutoVariantSelect = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_auto_variant_select>(global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_auto_variant_select.CreateFromDiscriminatorValue); } },
                { "bcc_list", n => { BccList = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "campaign_schedule", n => { CampaignSchedule = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_campaign_schedule>(global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_campaign_schedule.CreateFromDiscriminatorValue); } },
                { "cc_list", n => { CcList = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "daily_limit", n => { DailyLimit = n.GetDoubleValue(); } },
                { "daily_max_leads", n => { DailyMaxLeads = n.GetDoubleValue(); } },
                { "disable_bounce_protect", n => { DisableBounceProtect = n.GetBoolValue(); } },
                { "email_gap", n => { EmailGap = n.GetDoubleValue(); } },
                { "email_list", n => { EmailList = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "email_tag_list", n => { EmailTagList = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "first_email_text_only", n => { FirstEmailTextOnly = n.GetBoolValue(); } },
                { "insert_unsubscribe_header", n => { InsertUnsubscribeHeader = n.GetBoolValue(); } },
                { "is_evergreen", n => { IsEvergreen = n.GetBoolValue(); } },
                { "limit_emails_per_company_override", n => { LimitEmailsPerCompanyOverride = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_limit_emails_per_company_override>(global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_limit_emails_per_company_override.CreateFromDiscriminatorValue); } },
                { "link_tracking", n => { LinkTracking = n.GetBoolValue(); } },
                { "match_lead_esp", n => { MatchLeadEsp = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "open_tracking", n => { OpenTracking = n.GetBoolValue(); } },
                { "owned_by", n => { OwnedBy = n.GetGuidValue(); } },
                { "pl_value", n => { PlValue = n.GetDoubleValue(); } },
                { "prioritize_new_leads", n => { PrioritizeNewLeads = n.GetBoolValue(); } },
                { "provider_routing_rules", n => { ProviderRoutingRules = n.GetCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_provider_routing_rules>(global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_provider_routing_rules.CreateFromDiscriminatorValue)?.AsList(); } },
                { "random_wait_max", n => { RandomWaitMax = n.GetDoubleValue(); } },
                { "sequences", n => { Sequences = n.GetCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_sequences>(global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_sequences.CreateFromDiscriminatorValue)?.AsList(); } },
                { "stop_for_company", n => { StopForCompany = n.GetBoolValue(); } },
                { "stop_on_auto_reply", n => { StopOnAutoReply = n.GetBoolValue(); } },
                { "stop_on_reply", n => { StopOnReply = n.GetBoolValue(); } },
                { "text_only", n => { TextOnly = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allow_risky_contacts", AllowRiskyContacts);
            writer.WriteObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_auto_variant_select>("auto_variant_select", AutoVariantSelect);
            writer.WriteCollectionOfPrimitiveValues<string>("bcc_list", BccList);
            writer.WriteObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_campaign_schedule>("campaign_schedule", CampaignSchedule);
            writer.WriteCollectionOfPrimitiveValues<string>("cc_list", CcList);
            writer.WriteDoubleValue("daily_limit", DailyLimit);
            writer.WriteDoubleValue("daily_max_leads", DailyMaxLeads);
            writer.WriteBoolValue("disable_bounce_protect", DisableBounceProtect);
            writer.WriteDoubleValue("email_gap", EmailGap);
            writer.WriteCollectionOfPrimitiveValues<string>("email_list", EmailList);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("email_tag_list", EmailTagList);
            writer.WriteBoolValue("first_email_text_only", FirstEmailTextOnly);
            writer.WriteBoolValue("insert_unsubscribe_header", InsertUnsubscribeHeader);
            writer.WriteBoolValue("is_evergreen", IsEvergreen);
            writer.WriteObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_limit_emails_per_company_override>("limit_emails_per_company_override", LimitEmailsPerCompanyOverride);
            writer.WriteBoolValue("link_tracking", LinkTracking);
            writer.WriteBoolValue("match_lead_esp", MatchLeadEsp);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("open_tracking", OpenTracking);
            writer.WriteGuidValue("owned_by", OwnedBy);
            writer.WriteDoubleValue("pl_value", PlValue);
            writer.WriteBoolValue("prioritize_new_leads", PrioritizeNewLeads);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_provider_routing_rules>("provider_routing_rules", ProviderRoutingRules);
            writer.WriteDoubleValue("random_wait_max", RandomWaitMax);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Item.CampaignsPatchRequestBody_sequences>("sequences", Sequences);
            writer.WriteBoolValue("stop_for_company", StopForCompany);
            writer.WriteBoolValue("stop_on_auto_reply", StopOnAutoReply);
            writer.WriteBoolValue("stop_on_reply", StopOnReply);
            writer.WriteBoolValue("text_only", TextOnly);
        }
    }
}
#pragma warning restore CS0618
