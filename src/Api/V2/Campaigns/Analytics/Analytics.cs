// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Analytics
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Analytics : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The number of bounced leads</summary>
        public int? BouncedCount { get; set; }
        /// <summary>The ID of the campaign</summary>
        public Guid? CampaignId { get; set; }
        /// <summary>Whether the campaign is evergreen</summary>
        public bool? CampaignIsEvergreen { get; set; }
        /// <summary>The name of the campaign</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CampaignName { get; set; }
#nullable restore
#else
        public string CampaignName { get; set; }
#endif
        /// <summary>The campaign status</summary>
        public double? CampaignStatus { get; set; }
        /// <summary>The number of leads that the campaign was completed for</summary>
        public int? CompletedCount { get; set; }
        /// <summary>Number of leads for whom the sequence has started</summary>
        public int? ContactedCount { get; set; }
        /// <summary>The total number of sent emails</summary>
        public int? EmailsSentCount { get; set; }
        /// <summary>The total number of leads</summary>
        public int? LeadsCount { get; set; }
        /// <summary>The number of links that got clicked</summary>
        public int? LinkClickCount { get; set; }
        /// <summary>The total number of new leads contacted</summary>
        public int? NewLeadsContactedCount { get; set; }
        /// <summary>The number of leads that opened at least one email</summary>
        public int? OpenCount { get; set; }
        /// <summary>The number of leads that replied to at least one email</summary>
        public int? ReplyCount { get; set; }
        /// <summary>The total number of unique opportunities created</summary>
        public int? TotalOpportunities { get; set; }
        /// <summary>The total value of opportunities created</summary>
        public double? TotalOpportunityValue { get; set; }
        /// <summary>The number of unsubscribed leads</summary>
        public int? UnsubscribedCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Analytics.Analytics"/> and sets the default values.
        /// </summary>
        public Analytics()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Analytics.Analytics"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Analytics.Analytics CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Analytics.Analytics();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bounced_count", n => { BouncedCount = n.GetIntValue(); } },
                { "campaign_id", n => { CampaignId = n.GetGuidValue(); } },
                { "campaign_is_evergreen", n => { CampaignIsEvergreen = n.GetBoolValue(); } },
                { "campaign_name", n => { CampaignName = n.GetStringValue(); } },
                { "campaign_status", n => { CampaignStatus = n.GetDoubleValue(); } },
                { "completed_count", n => { CompletedCount = n.GetIntValue(); } },
                { "contacted_count", n => { ContactedCount = n.GetIntValue(); } },
                { "emails_sent_count", n => { EmailsSentCount = n.GetIntValue(); } },
                { "leads_count", n => { LeadsCount = n.GetIntValue(); } },
                { "link_click_count", n => { LinkClickCount = n.GetIntValue(); } },
                { "new_leads_contacted_count", n => { NewLeadsContactedCount = n.GetIntValue(); } },
                { "open_count", n => { OpenCount = n.GetIntValue(); } },
                { "reply_count", n => { ReplyCount = n.GetIntValue(); } },
                { "total_opportunities", n => { TotalOpportunities = n.GetIntValue(); } },
                { "total_opportunity_value", n => { TotalOpportunityValue = n.GetDoubleValue(); } },
                { "unsubscribed_count", n => { UnsubscribedCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("bounced_count", BouncedCount);
            writer.WriteGuidValue("campaign_id", CampaignId);
            writer.WriteBoolValue("campaign_is_evergreen", CampaignIsEvergreen);
            writer.WriteStringValue("campaign_name", CampaignName);
            writer.WriteDoubleValue("campaign_status", CampaignStatus);
            writer.WriteIntValue("completed_count", CompletedCount);
            writer.WriteIntValue("contacted_count", ContactedCount);
            writer.WriteIntValue("emails_sent_count", EmailsSentCount);
            writer.WriteIntValue("leads_count", LeadsCount);
            writer.WriteIntValue("link_click_count", LinkClickCount);
            writer.WriteIntValue("new_leads_contacted_count", NewLeadsContactedCount);
            writer.WriteIntValue("open_count", OpenCount);
            writer.WriteIntValue("reply_count", ReplyCount);
            writer.WriteIntValue("total_opportunities", TotalOpportunities);
            writer.WriteDoubleValue("total_opportunity_value", TotalOpportunityValue);
            writer.WriteIntValue("unsubscribed_count", UnsubscribedCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
