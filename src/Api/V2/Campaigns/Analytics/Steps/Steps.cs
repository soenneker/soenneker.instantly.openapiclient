// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Analytics.Steps
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Steps : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The total number of links clicked</summary>
        public int? Clicks { get; set; }
        /// <summary>The total number of opened emails</summary>
        public int? Opened { get; set; }
        /// <summary>The total number of opportunities created from this step. Included only if `include_opportunities_count` is `true`</summary>
        public int? Opportunities { get; set; }
        /// <summary>The total number of replies</summary>
        public int? Replies { get; set; }
        /// <summary>The total number of sent emails</summary>
        public int? Sent { get; set; }
        /// <summary>The step number. When null it means we couldn&apos;t determine the step number for the event, for instance for list leads, which are not part of a campaign.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Step { get; set; }
#nullable restore
#else
        public string Step { get; set; }
#endif
        /// <summary>The total number of unique links clicked. Unique meaning from unique leads, not unique links. For instance, if a lead clicked a link 3 times, it will be counted as 1 unique click. If a lead clicked 3 different links, it will still be counted as 1 unique click</summary>
        public int? UniqueClicks { get; set; }
        /// <summary>The total number of opened emails</summary>
        public int? UniqueOpened { get; set; }
        /// <summary>The total number of unique opportunities created from this step. Unique meaning unique per lead. If a lead has multiple opportunities, it will be counted as 1 unique opportunity. Included only if `include_opportunities_count` is `true`</summary>
        public int? UniqueOpportunities { get; set; }
        /// <summary>The total number of replies</summary>
        public int? UniqueReplies { get; set; }
        /// <summary>The variant number, starting from 0. 0 = A, 1 = B, 2 = C, etc. When null it means we couldn&apos;t determine the variant for the event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Variant { get; set; }
#nullable restore
#else
        public string Variant { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Analytics.Steps.Steps"/> and sets the default values.
        /// </summary>
        public Steps()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Analytics.Steps.Steps"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Analytics.Steps.Steps CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.Campaigns.Analytics.Steps.Steps();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "clicks", n => { Clicks = n.GetIntValue(); } },
                { "opened", n => { Opened = n.GetIntValue(); } },
                { "opportunities", n => { Opportunities = n.GetIntValue(); } },
                { "replies", n => { Replies = n.GetIntValue(); } },
                { "sent", n => { Sent = n.GetIntValue(); } },
                { "step", n => { Step = n.GetStringValue(); } },
                { "unique_clicks", n => { UniqueClicks = n.GetIntValue(); } },
                { "unique_opened", n => { UniqueOpened = n.GetIntValue(); } },
                { "unique_opportunities", n => { UniqueOpportunities = n.GetIntValue(); } },
                { "unique_replies", n => { UniqueReplies = n.GetIntValue(); } },
                { "variant", n => { Variant = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("clicks", Clicks);
            writer.WriteIntValue("opened", Opened);
            writer.WriteIntValue("opportunities", Opportunities);
            writer.WriteIntValue("replies", Replies);
            writer.WriteIntValue("sent", Sent);
            writer.WriteStringValue("step", Step);
            writer.WriteIntValue("unique_clicks", UniqueClicks);
            writer.WriteIntValue("unique_opened", UniqueOpened);
            writer.WriteIntValue("unique_opportunities", UniqueOpportunities);
            writer.WriteIntValue("unique_replies", UniqueReplies);
            writer.WriteStringValue("variant", Variant);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
