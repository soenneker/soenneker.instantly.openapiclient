// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs
{
    /// <summary>
    /// Builds and executes requests for operations under \api\v2\background-jobs
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BackgroundJobsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Soenneker.Instantly.OpenApiClient.api.v2.backgroundJobs.item collection</summary>
        /// <param name="position">The ID of the requested item</param>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.Item.BackgroundJobsItemRequestBuilder"/></returns>
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.Item.BackgroundJobsItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.Item.BackgroundJobsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BackgroundJobsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v2/background-jobs{?entity_id*,entity_type*,excluded_ids*,ids*,included_ids*,limit*,sort_column*,sort_order*,starting_after*,status*,type*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BackgroundJobsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v2/background-jobs{?entity_id*,entity_type*,excluded_ids*,ids*,included_ids*,limit*,sort_column*,sort_order*,starting_after*,status*,type*}", rawUrl)
        {
        }
        /// <summary>
        /// Requires one of the following scopes: `background-jobs:read`, `background-jobs:all`, `all:read`, `all:all`
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobs401Error">When receiving a 401 status code</exception>
        /// <exception cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobs429Error">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsGetResponse?> GetAsync(Action<RequestConfiguration<global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsRequestBuilder.BackgroundJobsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsGetResponse> GetAsync(Action<RequestConfiguration<global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsRequestBuilder.BackgroundJobsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "401", global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobs401Error.CreateFromDiscriminatorValue },
                { "429", global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobs429Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsGetResponse>(requestInfo, global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Requires one of the following scopes: `background-jobs:read`, `background-jobs:all`, `all:read`, `all:all`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsRequestBuilder.BackgroundJobsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsRequestBuilder.BackgroundJobsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.BackgroundJobsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Requires one of the following scopes: `background-jobs:read`, `background-jobs:all`, `all:read`, `all:all`
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BackgroundJobsRequestBuilderGetQueryParameters 
        {
            /// <summary>The ID of the entity. Multiple IDs can be provided as a comma-separated list</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("entity_id")]
            public string? EntityId { get; set; }
#nullable restore
#else
            [QueryParameter("entity_id")]
            public string EntityId { get; set; }
#endif
            /// <summary>The type of the entity</summary>
            [QueryParameter("entity_type")]
            public global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.GetEntity_typeQueryParameterType? EntityType { get; set; }
            /// <summary>The ID of the job to be excluded from the response. Multiple IDs can be provided as a comma-separated list</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("excluded_ids")]
            public string? ExcludedIds { get; set; }
#nullable restore
#else
            [QueryParameter("excluded_ids")]
            public string ExcludedIds { get; set; }
#endif
            /// <summary>The ID of the job. Multiple IDs can be provided as a comma-separated list</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("ids")]
            public string? Ids { get; set; }
#nullable restore
#else
            [QueryParameter("ids")]
            public string Ids { get; set; }
#endif
            /// <summary>The ID of the job to be included in the response. Multiple IDs can be provided as a comma-separated list</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("included_ids")]
            public string? IncludedIds { get; set; }
#nullable restore
#else
            [QueryParameter("included_ids")]
            public string IncludedIds { get; set; }
#endif
            /// <summary>The number of items to return</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>The column to sort the results by</summary>
            [QueryParameter("sort_column")]
            public global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.GetSort_columnQueryParameterType? SortColumn { get; set; }
            /// <summary>The order to sort the results by</summary>
            [QueryParameter("sort_order")]
            public global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.GetSort_orderQueryParameterType? SortOrder { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("starting_after")]
            public string? StartingAfter { get; set; }
#nullable restore
#else
            [QueryParameter("starting_after")]
            public string StartingAfter { get; set; }
#endif
            /// <summary>The status of the job. Multiple statuses can be provided as a comma-separated list. Valid statuses are: pending, in-progress, success, failed</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("status")]
            public string? Status { get; set; }
#nullable restore
#else
            [QueryParameter("status")]
            public string Status { get; set; }
#endif
            /// <summary>The type of the job</summary>
            [QueryParameter("type")]
            public global::Soenneker.Instantly.OpenApiClient.Api.V2.BackgroundJobs.GetTypeQueryParameterType? Type { get; set; }
        }
    }
}
#pragma warning restore CS0618
