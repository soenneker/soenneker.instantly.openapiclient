// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DfyEmailAccountOrdersPostResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The list of blacklisted domains (if any)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BlacklistDomains { get; set; }
#nullable restore
#else
        public List<string> BlacklistDomains { get; set; }
#endif
        /// <summary>The list of domains without accounts (if any). The `accounts` field for items in the `items` array for these domains was empty.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DomainsWithoutAccounts { get; set; }
#nullable restore
#else
        public List<string> DomainsWithoutAccounts { get; set; }
#endif
        /// <summary>The list of domains that are free (domains can be free during promotions)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? FreeDomains { get; set; }
#nullable restore
#else
        public List<string> FreeDomains { get; set; }
#endif
        /// <summary>The list of invalid accounts (if any)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse_invalid_accounts>? InvalidAccounts { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse_invalid_accounts> InvalidAccounts { get; set; }
#endif
        /// <summary>The list of invalid domains (if any)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? InvalidDomains { get; set; }
#nullable restore
#else
        public List<string> InvalidDomains { get; set; }
#endif
        /// <summary>The list of invalid forwarding domains (if any)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? InvalidForwardingDomains { get; set; }
#nullable restore
#else
        public List<string> InvalidForwardingDomains { get; set; }
#endif
        /// <summary>The list of domains that are missing order (if any). Can happen when you order extra accounts for domains that you didn&apos;t order before.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MissingDomainOrders { get; set; }
#nullable restore
#else
        public List<string> MissingDomainOrders { get; set; }
#endif
        /// <summary>The number of accounts ordered</summary>
        public double? NumberOfAccountsOrdered { get; set; }
        /// <summary>The number of domains ordered</summary>
        public double? NumberOfDomainsOrdered { get; set; }
        /// <summary>The error that occurred if the order was not placed. If the order was placed successfully, then this field will be omitted.</summary>
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse_order_error? OrderError { get; set; }
        /// <summary>Whether the order is valid or not. If true, then the order is valid and can be placed. If false, then the order is not valid and cannot be placed. Use this field when you run a simulation to understand whether a real order would be valid.</summary>
        public bool? OrderIsValid { get; set; }
        /// <summary>The list of items that were ordered, with the pricing information for each item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse_order_items>? OrderItems { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse_order_items> OrderItems { get; set; }
#endif
        /// <summary>Whether the order was placed or not. If true, then the order was placed successfully. If false, then the order was not placed due to an error or simulation mode was enabled.</summary>
        public bool? OrderPlaced { get; set; }
        /// <summary>The brand of the payment method used for the order</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentMethodBrand { get; set; }
#nullable restore
#else
        public string PaymentMethodBrand { get; set; }
#endif
        /// <summary>The last 4 digits of the payment method used for the order</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentMethodLast4Digits { get; set; }
#nullable restore
#else
        public string PaymentMethodLast4Digits { get; set; }
#endif
        /// <summary>The name on the card used for the order</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentMethodNameOnCard { get; set; }
#nullable restore
#else
        public string PaymentMethodNameOnCard { get; set; }
#endif
        /// <summary>The price per account per month</summary>
        public double? PricePerAccountPerMonth { get; set; }
        /// <summary>The price per domain per year</summary>
        public double? PricePerDomainPerYear { get; set; }
        /// <summary>Whether to run the request in simulation mode or not. If set to true, the order will NOT be placed, your card will NOT be charged, and only a price quote will be returned. We will still check the validity of the order and the accounts, and return the results of the validation (if the order_is_valid field is true, then the order would be valid and could be placed).</summary>
        public bool? Simulation { get; set; }
        /// <summary>The total price per account per month</summary>
        public double? TotalAccountsPricePerMonth { get; set; }
        /// <summary>The total discount you will get for the order at the moment. Discounts are applied automatically when we&apos;re running promotions.</summary>
        public double? TotalDiscount { get; set; }
        /// <summary>The total price per domain per year</summary>
        public double? TotalDomainsPricePerYear { get; set; }
        /// <summary>The total price you will have to pay for the order at the moment. This is the sum of the `total_accounts_price_per_month` and the `total_domains_price_per_year` fields.</summary>
        public double? TotalPrice { get; set; }
        /// <summary>The total price per month you will have to pay for the order</summary>
        public double? TotalPricePerMonth { get; set; }
        /// <summary>The total price per year you will have to pay for the order</summary>
        public double? TotalPricePerYear { get; set; }
        /// <summary>The list of unavailable domains (if any)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UnavailableDomains { get; set; }
#nullable restore
#else
        public List<string> UnavailableDomains { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse"/> and sets the default values.
        /// </summary>
        public DfyEmailAccountOrdersPostResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "blacklist_domains", n => { BlacklistDomains = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "domains_without_accounts", n => { DomainsWithoutAccounts = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "free_domains", n => { FreeDomains = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "invalid_accounts", n => { InvalidAccounts = n.GetCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse_invalid_accounts>(global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse_invalid_accounts.CreateFromDiscriminatorValue)?.AsList(); } },
                { "invalid_domains", n => { InvalidDomains = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "invalid_forwarding_domains", n => { InvalidForwardingDomains = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "missing_domain_orders", n => { MissingDomainOrders = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "number_of_accounts_ordered", n => { NumberOfAccountsOrdered = n.GetDoubleValue(); } },
                { "number_of_domains_ordered", n => { NumberOfDomainsOrdered = n.GetDoubleValue(); } },
                { "order_error", n => { OrderError = n.GetEnumValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse_order_error>(); } },
                { "order_is_valid", n => { OrderIsValid = n.GetBoolValue(); } },
                { "order_items", n => { OrderItems = n.GetCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse_order_items>(global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse_order_items.CreateFromDiscriminatorValue)?.AsList(); } },
                { "order_placed", n => { OrderPlaced = n.GetBoolValue(); } },
                { "payment_method_brand", n => { PaymentMethodBrand = n.GetStringValue(); } },
                { "payment_method_last_4_digits", n => { PaymentMethodLast4Digits = n.GetStringValue(); } },
                { "payment_method_name_on_card", n => { PaymentMethodNameOnCard = n.GetStringValue(); } },
                { "price_per_account_per_month", n => { PricePerAccountPerMonth = n.GetDoubleValue(); } },
                { "price_per_domain_per_year", n => { PricePerDomainPerYear = n.GetDoubleValue(); } },
                { "simulation", n => { Simulation = n.GetBoolValue(); } },
                { "total_accounts_price_per_month", n => { TotalAccountsPricePerMonth = n.GetDoubleValue(); } },
                { "total_discount", n => { TotalDiscount = n.GetDoubleValue(); } },
                { "total_domains_price_per_year", n => { TotalDomainsPricePerYear = n.GetDoubleValue(); } },
                { "total_price", n => { TotalPrice = n.GetDoubleValue(); } },
                { "total_price_per_month", n => { TotalPricePerMonth = n.GetDoubleValue(); } },
                { "total_price_per_year", n => { TotalPricePerYear = n.GetDoubleValue(); } },
                { "unavailable_domains", n => { UnavailableDomains = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("blacklist_domains", BlacklistDomains);
            writer.WriteCollectionOfPrimitiveValues<string>("domains_without_accounts", DomainsWithoutAccounts);
            writer.WriteCollectionOfPrimitiveValues<string>("free_domains", FreeDomains);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse_invalid_accounts>("invalid_accounts", InvalidAccounts);
            writer.WriteCollectionOfPrimitiveValues<string>("invalid_domains", InvalidDomains);
            writer.WriteCollectionOfPrimitiveValues<string>("invalid_forwarding_domains", InvalidForwardingDomains);
            writer.WriteCollectionOfPrimitiveValues<string>("missing_domain_orders", MissingDomainOrders);
            writer.WriteDoubleValue("number_of_accounts_ordered", NumberOfAccountsOrdered);
            writer.WriteDoubleValue("number_of_domains_ordered", NumberOfDomainsOrdered);
            writer.WriteEnumValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse_order_error>("order_error", OrderError);
            writer.WriteBoolValue("order_is_valid", OrderIsValid);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.DfyEmailAccountOrders.DfyEmailAccountOrdersPostResponse_order_items>("order_items", OrderItems);
            writer.WriteBoolValue("order_placed", OrderPlaced);
            writer.WriteStringValue("payment_method_brand", PaymentMethodBrand);
            writer.WriteStringValue("payment_method_last_4_digits", PaymentMethodLast4Digits);
            writer.WriteStringValue("payment_method_name_on_card", PaymentMethodNameOnCard);
            writer.WriteDoubleValue("price_per_account_per_month", PricePerAccountPerMonth);
            writer.WriteDoubleValue("price_per_domain_per_year", PricePerDomainPerYear);
            writer.WriteBoolValue("simulation", Simulation);
            writer.WriteDoubleValue("total_accounts_price_per_month", TotalAccountsPricePerMonth);
            writer.WriteDoubleValue("total_discount", TotalDiscount);
            writer.WriteDoubleValue("total_domains_price_per_year", TotalDomainsPricePerYear);
            writer.WriteDoubleValue("total_price", TotalPrice);
            writer.WriteDoubleValue("total_price_per_month", TotalPricePerMonth);
            writer.WriteDoubleValue("total_price_per_year", TotalPricePerYear);
            writer.WriteCollectionOfPrimitiveValues<string>("unavailable_domains", UnavailableDomains);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
