// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementAnalytics.StatsByTestId
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class StatsByTestId : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The category_count property</summary>
        public double? CategoryCount { get; set; }
        /// <summary>The category_percent property</summary>
        public double? CategoryPercent { get; set; }
        /// <summary>The count property</summary>
        public double? Count { get; set; }
        /// <summary>The inbox_count property</summary>
        public double? InboxCount { get; set; }
        /// <summary>The inbox_percent property</summary>
        public double? InboxPercent { get; set; }
        /// <summary>The spam_count property</summary>
        public double? SpamCount { get; set; }
        /// <summary>The spam_percent property</summary>
        public double? SpamPercent { get; set; }
        /// <summary>The test_id property</summary>
        public Guid? TestId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementAnalytics.StatsByTestId.StatsByTestId"/> and sets the default values.
        /// </summary>
        public StatsByTestId()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementAnalytics.StatsByTestId.StatsByTestId"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementAnalytics.StatsByTestId.StatsByTestId CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementAnalytics.StatsByTestId.StatsByTestId();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "category_count", n => { CategoryCount = n.GetDoubleValue(); } },
                { "category_percent", n => { CategoryPercent = n.GetDoubleValue(); } },
                { "count", n => { Count = n.GetDoubleValue(); } },
                { "inbox_count", n => { InboxCount = n.GetDoubleValue(); } },
                { "inbox_percent", n => { InboxPercent = n.GetDoubleValue(); } },
                { "spam_count", n => { SpamCount = n.GetDoubleValue(); } },
                { "spam_percent", n => { SpamPercent = n.GetDoubleValue(); } },
                { "test_id", n => { TestId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("category_count", CategoryCount);
            writer.WriteDoubleValue("category_percent", CategoryPercent);
            writer.WriteDoubleValue("count", Count);
            writer.WriteDoubleValue("inbox_count", InboxCount);
            writer.WriteDoubleValue("inbox_percent", InboxPercent);
            writer.WriteDoubleValue("spam_count", SpamCount);
            writer.WriteDoubleValue("spam_percent", SpamPercent);
            writer.WriteGuidValue("test_id", TestId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
