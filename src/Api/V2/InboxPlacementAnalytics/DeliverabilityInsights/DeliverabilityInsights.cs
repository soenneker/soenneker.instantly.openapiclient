// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementAnalytics.DeliverabilityInsights
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DeliverabilityInsights : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The category_percentage property</summary>
        public double? CategoryPercentage { get; set; }
        /// <summary>The from property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? From { get; set; }
#nullable restore
#else
        public string From { get; set; }
#endif
        /// <summary>The inbox_percentage property</summary>
        public double? InboxPercentage { get; set; }
        /// <summary>The prev_category_percentage property</summary>
        public double? PrevCategoryPercentage { get; set; }
        /// <summary>The prev_inbox_percentage property</summary>
        public double? PrevInboxPercentage { get; set; }
        /// <summary>The previous_from property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousFrom { get; set; }
#nullable restore
#else
        public string PreviousFrom { get; set; }
#endif
        /// <summary>The previous_to property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousTo { get; set; }
#nullable restore
#else
        public string PreviousTo { get; set; }
#endif
        /// <summary>The prev_spam_percentage property</summary>
        public double? PrevSpamPercentage { get; set; }
        /// <summary>The recipient_esp property</summary>
        public double? RecipientEsp { get; set; }
        /// <summary>The sender_esp property</summary>
        public double? SenderEsp { get; set; }
        /// <summary>The spam_percentage property</summary>
        public double? SpamPercentage { get; set; }
        /// <summary>The test_id property</summary>
        public Guid? TestId { get; set; }
        /// <summary>The to property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? To { get; set; }
#nullable restore
#else
        public string To { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementAnalytics.DeliverabilityInsights.DeliverabilityInsights"/> and sets the default values.
        /// </summary>
        public DeliverabilityInsights()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementAnalytics.DeliverabilityInsights.DeliverabilityInsights"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementAnalytics.DeliverabilityInsights.DeliverabilityInsights CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.InboxPlacementAnalytics.DeliverabilityInsights.DeliverabilityInsights();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "category_percentage", n => { CategoryPercentage = n.GetDoubleValue(); } },
                { "from", n => { From = n.GetStringValue(); } },
                { "inbox_percentage", n => { InboxPercentage = n.GetDoubleValue(); } },
                { "prev_category_percentage", n => { PrevCategoryPercentage = n.GetDoubleValue(); } },
                { "prev_inbox_percentage", n => { PrevInboxPercentage = n.GetDoubleValue(); } },
                { "prev_spam_percentage", n => { PrevSpamPercentage = n.GetDoubleValue(); } },
                { "previous_from", n => { PreviousFrom = n.GetStringValue(); } },
                { "previous_to", n => { PreviousTo = n.GetStringValue(); } },
                { "recipient_esp", n => { RecipientEsp = n.GetDoubleValue(); } },
                { "sender_esp", n => { SenderEsp = n.GetDoubleValue(); } },
                { "spam_percentage", n => { SpamPercentage = n.GetDoubleValue(); } },
                { "test_id", n => { TestId = n.GetGuidValue(); } },
                { "to", n => { To = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("category_percentage", CategoryPercentage);
            writer.WriteStringValue("from", From);
            writer.WriteDoubleValue("inbox_percentage", InboxPercentage);
            writer.WriteDoubleValue("prev_category_percentage", PrevCategoryPercentage);
            writer.WriteDoubleValue("prev_inbox_percentage", PrevInboxPercentage);
            writer.WriteStringValue("previous_from", PreviousFrom);
            writer.WriteStringValue("previous_to", PreviousTo);
            writer.WriteDoubleValue("prev_spam_percentage", PrevSpamPercentage);
            writer.WriteDoubleValue("recipient_esp", RecipientEsp);
            writer.WriteDoubleValue("sender_esp", SenderEsp);
            writer.WriteDoubleValue("spam_percentage", SpamPercentage);
            writer.WriteGuidValue("test_id", TestId);
            writer.WriteStringValue("to", To);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
