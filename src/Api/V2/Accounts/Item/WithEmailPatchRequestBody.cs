// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithEmailPatchRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Daily email sending limit</summary>
        public double? DailyLimit { get; set; }
        /// <summary>Whether to enable slow ramp up for sending limits</summary>
        public bool? EnableSlowRamp { get; set; }
        /// <summary>First name associated with the account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>The limit for inbox placement tests</summary>
        public double? InboxPlacementTestLimit { get; set; }
        /// <summary>Last name associated with the account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>The remove_tracking_domain property</summary>
        public bool? RemoveTrackingDomain { get; set; }
        /// <summary>The gap between emails sent from this account in minutes (minimum wait time when used with multiple campaigns)</summary>
        public double? SendingGap { get; set; }
        /// <summary>The skip_cname_check property</summary>
        public bool? SkipCnameCheck { get; set; }
        /// <summary>Tracking domain</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TrackingDomainName { get; set; }
#nullable restore
#else
        public string TrackingDomainName { get; set; }
#endif
        /// <summary>Tracking domain status</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TrackingDomainStatus { get; set; }
#nullable restore
#else
        public string TrackingDomainStatus { get; set; }
#endif
        /// <summary>Warmup configuration for the account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.Item.WithEmailPatchRequestBody_warmup? Warmup { get; set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.Item.WithEmailPatchRequestBody_warmup Warmup { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.Item.WithEmailPatchRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.Item.WithEmailPatchRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.Item.WithEmailPatchRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "daily_limit", n => { DailyLimit = n.GetDoubleValue(); } },
                { "enable_slow_ramp", n => { EnableSlowRamp = n.GetBoolValue(); } },
                { "first_name", n => { FirstName = n.GetStringValue(); } },
                { "inbox_placement_test_limit", n => { InboxPlacementTestLimit = n.GetDoubleValue(); } },
                { "last_name", n => { LastName = n.GetStringValue(); } },
                { "remove_tracking_domain", n => { RemoveTrackingDomain = n.GetBoolValue(); } },
                { "sending_gap", n => { SendingGap = n.GetDoubleValue(); } },
                { "skip_cname_check", n => { SkipCnameCheck = n.GetBoolValue(); } },
                { "tracking_domain_name", n => { TrackingDomainName = n.GetStringValue(); } },
                { "tracking_domain_status", n => { TrackingDomainStatus = n.GetStringValue(); } },
                { "warmup", n => { Warmup = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.Item.WithEmailPatchRequestBody_warmup>(global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.Item.WithEmailPatchRequestBody_warmup.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("daily_limit", DailyLimit);
            writer.WriteBoolValue("enable_slow_ramp", EnableSlowRamp);
            writer.WriteStringValue("first_name", FirstName);
            writer.WriteDoubleValue("inbox_placement_test_limit", InboxPlacementTestLimit);
            writer.WriteStringValue("last_name", LastName);
            writer.WriteBoolValue("remove_tracking_domain", RemoveTrackingDomain);
            writer.WriteDoubleValue("sending_gap", SendingGap);
            writer.WriteBoolValue("skip_cname_check", SkipCnameCheck);
            writer.WriteStringValue("tracking_domain_name", TrackingDomainName);
            writer.WriteStringValue("tracking_domain_status", TrackingDomainStatus);
            writer.WriteObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.Item.WithEmailPatchRequestBody_warmup>("warmup", Warmup);
        }
    }
}
#pragma warning restore CS0618
