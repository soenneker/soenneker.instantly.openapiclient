// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.Accounts
{
    /// <summary>
    /// Warmup configuration for the account
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AccountsPostRequestBody_warmup : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Advanced settings for the account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.AccountsPostRequestBody_warmup_advanced? Advanced { get; set; }
#nullable restore
#else
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.AccountsPostRequestBody_warmup_advanced Advanced { get; set; }
#endif
        /// <summary>Daily increment for email sending limits</summary>
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.AccountsPostRequestBody_warmup_increment? Increment { get; set; }
        /// <summary>Email sending limit for the account</summary>
        public double? Limit { get; set; }
        /// <summary>Reply rate for the account</summary>
        public double? ReplyRate { get; set; }
        /// <summary>Custom tag for the account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WarmupCustomFtag { get; set; }
#nullable restore
#else
        public string WarmupCustomFtag { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.AccountsPostRequestBody_warmup"/> and sets the default values.
        /// </summary>
        public AccountsPostRequestBody_warmup()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.AccountsPostRequestBody_warmup"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.AccountsPostRequestBody_warmup CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.AccountsPostRequestBody_warmup();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "advanced", n => { Advanced = n.GetObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.AccountsPostRequestBody_warmup_advanced>(global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.AccountsPostRequestBody_warmup_advanced.CreateFromDiscriminatorValue); } },
                { "increment", n => { Increment = n.GetEnumValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.AccountsPostRequestBody_warmup_increment>(); } },
                { "limit", n => { Limit = n.GetDoubleValue(); } },
                { "reply_rate", n => { ReplyRate = n.GetDoubleValue(); } },
                { "warmup_custom_ftag", n => { WarmupCustomFtag = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.AccountsPostRequestBody_warmup_advanced>("advanced", Advanced);
            writer.WriteEnumValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.Accounts.AccountsPostRequestBody_warmup_increment>("increment", Increment);
            writer.WriteDoubleValue("limit", Limit);
            writer.WriteDoubleValue("reply_rate", ReplyRate);
            writer.WriteStringValue("warmup_custom_ftag", WarmupCustomFtag);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
