// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.LeadLists.Item.VerificationStats
{
    /// <summary>
    /// Sums up the leads by their verification status
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class VerificationStatsGetResponse_stats : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Count of catch all leads</summary>
        public double? CatchAll { get; set; }
        /// <summary>Count of invalid leads</summary>
        public double? Invalid { get; set; }
        /// <summary>Count of job change leads</summary>
        public double? JobChange { get; set; }
        /// <summary>Count of risky leads</summary>
        public double? Risky { get; set; }
        /// <summary>Count of verification job pending leads for leadfinder</summary>
        public double? VerificationJobPendingLeadfinder { get; set; }
        /// <summary>Count of verification job pending leads for user</summary>
        public double? VerificationJobPendingUser { get; set; }
        /// <summary>Count of verified leads</summary>
        public double? Verified { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.LeadLists.Item.VerificationStats.VerificationStatsGetResponse_stats"/> and sets the default values.
        /// </summary>
        public VerificationStatsGetResponse_stats()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.LeadLists.Item.VerificationStats.VerificationStatsGetResponse_stats"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.LeadLists.Item.VerificationStats.VerificationStatsGetResponse_stats CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.LeadLists.Item.VerificationStats.VerificationStatsGetResponse_stats();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "catch_all", n => { CatchAll = n.GetDoubleValue(); } },
                { "invalid", n => { Invalid = n.GetDoubleValue(); } },
                { "job_change", n => { JobChange = n.GetDoubleValue(); } },
                { "risky", n => { Risky = n.GetDoubleValue(); } },
                { "verification_job_pending_leadfinder", n => { VerificationJobPendingLeadfinder = n.GetDoubleValue(); } },
                { "verification_job_pending_user", n => { VerificationJobPendingUser = n.GetDoubleValue(); } },
                { "verified", n => { Verified = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("catch_all", CatchAll);
            writer.WriteDoubleValue("invalid", Invalid);
            writer.WriteDoubleValue("job_change", JobChange);
            writer.WriteDoubleValue("risky", Risky);
            writer.WriteDoubleValue("verification_job_pending_leadfinder", VerificationJobPendingLeadfinder);
            writer.WriteDoubleValue("verification_job_pending_user", VerificationJobPendingUser);
            writer.WriteDoubleValue("verified", Verified);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
