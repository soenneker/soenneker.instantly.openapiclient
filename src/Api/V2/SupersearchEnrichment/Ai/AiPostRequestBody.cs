// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Instantly.OpenApiClient.Api.V2.SupersearchEnrichment.Ai
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AiPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>When true, new leads added to the campaign/list will be automatically enriched using these same settings.</summary>
        public bool? AutoUpdate { get; set; }
        /// <summary>The filters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.SupersearchEnrichment.Ai.AiPostRequestBody_filters>? Filters { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Instantly.OpenApiClient.Api.V2.SupersearchEnrichment.Ai.AiPostRequestBody_filters> Filters { get; set; }
#endif
        /// <summary>List of column names to use as input data for the AI enrichment. These are the fields from your leads that will be used to generate content.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? InputColumns { get; set; }
#nullable restore
#else
        public List<string> InputColumns { get; set; }
#endif
        /// <summary>Maximum number of leads to enrich.</summary>
        public double? Limit { get; set; }
        /// <summary>Version of the AI model to use for enrichment. Different models have different capabilities, costs, and token limits.</summary>
        public global::Soenneker.Instantly.OpenApiClient.Api.V2.SupersearchEnrichment.Ai.AiPostRequestBody_model_version? ModelVersion { get; set; }
        /// <summary>Name of the column where the AI enrichment results will be stored</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OutputColumn { get; set; }
#nullable restore
#else
        public string OutputColumn { get; set; }
#endif
        /// <summary>When true, will overwrite existing values in the output column. When false, only empty fields will be enriched.</summary>
        public bool? Overwrite { get; set; }
        /// <summary>Custom prompt to guide the AI enrichment. Use {{variables}} to reference input data. Only used when templateId is not provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Prompt { get; set; }
#nullable restore
#else
        public string Prompt { get; set; }
#endif
        /// <summary>Id of the resource (list or campaign) to enrich</summary>
        public Guid? ResourceId { get; set; }
        /// <summary>Type of the entity to enrich</summary>
        public double? ResourceType { get; set; }
        /// <summary>Whether to send the state of the enrichment</summary>
        public bool? ShowState { get; set; }
        /// <summary>When true, leads without an email will be skipped.</summary>
        public bool? SkipLeadsWithoutEmail { get; set; }
        /// <summary>Status of the job</summary>
        public double? Status { get; set; }
        /// <summary>ID of a predefined AI prompt template to use instead of a custom prompt. Templates are reusable prompt configurations.</summary>
        public double? TemplateId { get; set; }
        /// <summary>When true, the enrichment will use Instantly&apos;s account for API calls. When false, it will use your own API keys configured in settings.</summary>
        public bool? UseInstantlyAccount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.SupersearchEnrichment.Ai.AiPostRequestBody"/> and sets the default values.
        /// </summary>
        public AiPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Instantly.OpenApiClient.Api.V2.SupersearchEnrichment.Ai.AiPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Instantly.OpenApiClient.Api.V2.SupersearchEnrichment.Ai.AiPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Instantly.OpenApiClient.Api.V2.SupersearchEnrichment.Ai.AiPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "auto_update", n => { AutoUpdate = n.GetBoolValue(); } },
                { "filters", n => { Filters = n.GetCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.SupersearchEnrichment.Ai.AiPostRequestBody_filters>(global::Soenneker.Instantly.OpenApiClient.Api.V2.SupersearchEnrichment.Ai.AiPostRequestBody_filters.CreateFromDiscriminatorValue)?.AsList(); } },
                { "input_columns", n => { InputColumns = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "limit", n => { Limit = n.GetDoubleValue(); } },
                { "model_version", n => { ModelVersion = n.GetEnumValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.SupersearchEnrichment.Ai.AiPostRequestBody_model_version>(); } },
                { "output_column", n => { OutputColumn = n.GetStringValue(); } },
                { "overwrite", n => { Overwrite = n.GetBoolValue(); } },
                { "prompt", n => { Prompt = n.GetStringValue(); } },
                { "resource_id", n => { ResourceId = n.GetGuidValue(); } },
                { "resource_type", n => { ResourceType = n.GetDoubleValue(); } },
                { "show_state", n => { ShowState = n.GetBoolValue(); } },
                { "skip_leads_without_email", n => { SkipLeadsWithoutEmail = n.GetBoolValue(); } },
                { "status", n => { Status = n.GetDoubleValue(); } },
                { "template_id", n => { TemplateId = n.GetDoubleValue(); } },
                { "use_instantly_account", n => { UseInstantlyAccount = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("auto_update", AutoUpdate);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Instantly.OpenApiClient.Api.V2.SupersearchEnrichment.Ai.AiPostRequestBody_filters>("filters", Filters);
            writer.WriteCollectionOfPrimitiveValues<string>("input_columns", InputColumns);
            writer.WriteDoubleValue("limit", Limit);
            writer.WriteEnumValue<global::Soenneker.Instantly.OpenApiClient.Api.V2.SupersearchEnrichment.Ai.AiPostRequestBody_model_version>("model_version", ModelVersion);
            writer.WriteStringValue("output_column", OutputColumn);
            writer.WriteBoolValue("overwrite", Overwrite);
            writer.WriteStringValue("prompt", Prompt);
            writer.WriteGuidValue("resource_id", ResourceId);
            writer.WriteDoubleValue("resource_type", ResourceType);
            writer.WriteBoolValue("show_state", ShowState);
            writer.WriteBoolValue("skip_leads_without_email", SkipLeadsWithoutEmail);
            writer.WriteDoubleValue("status", Status);
            writer.WriteDoubleValue("template_id", TemplateId);
            writer.WriteBoolValue("use_instantly_account", UseInstantlyAccount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
